# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Genomics.V1.Api.Variants do
  @moduledoc """
  API calls for all endpoints tagged `Variants`.
  """

  alias GoogleApi.Genomics.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Creates a new variant.

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (Variant): 

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.Variant{}} on success
  {:error, info} on failure
  """
  @spec genomics_variants_create(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.Variant.t()} | {:error, Tesla.Env.t()}
  def genomics_variants_create(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/variants")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Genomics.V1.Model.Variant{}])
  end

  @doc """
  Deletes a variant.

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - variant_id (String.t): The ID of the variant to be deleted.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec genomics_variants_delete(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def genomics_variants_delete(connection, variant_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1/variants/{variantId}", %{
        "variantId" => URI.encode_www_form(variant_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Genomics.V1.Model.Empty{}])
  end

  @doc """
  Gets a variant by ID.

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - variant_id (String.t): The ID of the variant.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.Variant{}} on success
  {:error, info} on failure
  """
  @spec genomics_variants_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.Variant.t()} | {:error, Tesla.Env.t()}
  def genomics_variants_get(connection, variant_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/variants/{variantId}", %{
        "variantId" => URI.encode_www_form(variant_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Genomics.V1.Model.Variant{}])
  end

  @doc """
  Creates variant data by asynchronously importing the provided information.  The variants for import will be merged with any existing variant that matches its reference sequence, start, end, reference bases, and alternative bases. If no such variant exists, a new one will be created.  When variants are merged, the call information from the new variant is added to the existing variant, and Variant info fields are merged as specified in infoMergeConfig. As a special case, for single-sample VCF files, QUAL and FILTER fields will be moved to the call level; these are sometimes interpreted in a call-specific context. Imported VCF headers are appended to the metadata already in a variant set.

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (ImportVariantsRequest): 

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec genomics_variants_import(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def genomics_variants_import(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/variants:import")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Genomics.V1.Model.Operation{}])
  end

  @doc """
  Merges the given variants with existing variants.  Each variant will be merged with an existing variant that matches its reference sequence, start, end, reference bases, and alternative bases. If no such variant exists, a new one will be created.  When variants are merged, the call information from the new variant is added to the existing variant. Variant info fields are merged as specified in the infoMergeConfig field of the MergeVariantsRequest.  Please exercise caution when using this method!  It is easy to introduce mistakes in existing variants and difficult to back out of them.  For example, suppose you were trying to merge a new variant with an existing one and both variants contain calls that belong to callsets with the same callset ID.      // Existing variant - irrelevant fields trimmed for clarity     {         \&quot;variantSetId\&quot;: \&quot;10473108253681171589\&quot;,         \&quot;referenceName\&quot;: \&quot;1\&quot;,         \&quot;start\&quot;: \&quot;10582\&quot;,         \&quot;referenceBases\&quot;: \&quot;G\&quot;,         \&quot;alternateBases\&quot;: [             \&quot;A\&quot;         ],         \&quot;calls\&quot;: [             {                 \&quot;callSetId\&quot;: \&quot;10473108253681171589-0\&quot;,                 \&quot;callSetName\&quot;: \&quot;CALLSET0\&quot;,                 \&quot;genotype\&quot;: [                     0,                     1                 ],             }         ]     }      // New variant with conflicting call information     {         \&quot;variantSetId\&quot;: \&quot;10473108253681171589\&quot;,         \&quot;referenceName\&quot;: \&quot;1\&quot;,         \&quot;start\&quot;: \&quot;10582\&quot;,         \&quot;referenceBases\&quot;: \&quot;G\&quot;,         \&quot;alternateBases\&quot;: [             \&quot;A\&quot;         ],         \&quot;calls\&quot;: [             {                 \&quot;callSetId\&quot;: \&quot;10473108253681171589-0\&quot;,                 \&quot;callSetName\&quot;: \&quot;CALLSET0\&quot;,                 \&quot;genotype\&quot;: [                     1,                     1                 ],             }         ]     }  The resulting merged variant would overwrite the existing calls with those from the new variant:      {         \&quot;variantSetId\&quot;: \&quot;10473108253681171589\&quot;,         \&quot;referenceName\&quot;: \&quot;1\&quot;,         \&quot;start\&quot;: \&quot;10582\&quot;,         \&quot;referenceBases\&quot;: \&quot;G\&quot;,         \&quot;alternateBases\&quot;: [             \&quot;A\&quot;         ],         \&quot;calls\&quot;: [             {                 \&quot;callSetId\&quot;: \&quot;10473108253681171589-0\&quot;,                 \&quot;callSetName\&quot;: \&quot;CALLSET0\&quot;,                 \&quot;genotype\&quot;: [                     1,                     1                 ],             }         ]     }  This may be the desired outcome, but it is up to the user to determine if if that is indeed the case.

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (MergeVariantsRequest): 

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec genomics_variants_merge(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def genomics_variants_merge(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/variants:merge")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Genomics.V1.Model.Empty{}])
  end

  @doc """
  Updates a variant.  This method supports patch semantics. Returns the modified variant without its calls.

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - variant_id (String.t): The ID of the variant to be updated.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :updateMask (String.t): An optional mask specifying which fields to update. At this time, mutable fields are names and info. Acceptable values are \&quot;names\&quot; and \&quot;info\&quot;. If unspecified, all mutable fields will be updated.
    - :body (Variant): 

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.Variant{}} on success
  {:error, info} on failure
  """
  @spec genomics_variants_patch(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.Variant.t()} | {:error, Tesla.Env.t()}
  def genomics_variants_patch(connection, variant_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1/variants/{variantId}", %{
        "variantId" => URI.encode_www_form(variant_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Genomics.V1.Model.Variant{}])
  end

  @doc """
  Gets a list of variants matching the criteria.  Implements [GlobalAllianceApi.searchVariants](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L126).

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (SearchVariantsRequest): 

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.SearchVariantsResponse{}} on success
  {:error, info} on failure
  """
  @spec genomics_variants_search(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.SearchVariantsResponse.t()} | {:error, Tesla.Env.t()}
  def genomics_variants_search(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/variants/search")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Genomics.V1.Model.SearchVariantsResponse{}])
  end
end
