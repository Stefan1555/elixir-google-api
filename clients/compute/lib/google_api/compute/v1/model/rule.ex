# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Compute.V1.Model.Rule do
  @moduledoc """
  A rule to be applied in a Policy.

  ## Attributes

  - action (String.t): Required Defaults to: `null`.
    - Enum - one of [ALLOW, ALLOW_WITH_LOG, DENY, DENY_WITH_LOG, LOG, NO_ACTION]
  - conditions ([Condition]): Additional restrictions that must be met. All conditions must pass for the rule to match. Defaults to: `null`.
  - description (String.t): Human-readable description of the rule. Defaults to: `null`.
  - ins ([String.t]): If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries. Defaults to: `null`.
  - logConfigs ([LogConfig]): The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action. Defaults to: `null`.
  - notIns ([String.t]): If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. Defaults to: `null`.
  - permissions ([String.t]): A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :action => any(),
          :conditions => list(GoogleApi.Compute.V1.Model.Condition.t()),
          :description => any(),
          :ins => list(any()),
          :logConfigs => list(GoogleApi.Compute.V1.Model.LogConfig.t()),
          :notIns => list(any()),
          :permissions => list(any())
        }

  field(:action)
  field(:conditions, as: GoogleApi.Compute.V1.Model.Condition, type: :list)
  field(:description)
  field(:ins, type: :list)
  field(:logConfigs, as: GoogleApi.Compute.V1.Model.LogConfig, type: :list)
  field(:notIns, type: :list)
  field(:permissions, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.Rule do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.Rule.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.Rule do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
