# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Compute.V1.Model.InterconnectDiagnostics do
  @moduledoc """
  Diagnostics information about interconnect, contains detailed and current technical information about Google?s side of the connection.

  ## Attributes

  - arpCaches ([InterconnectDiagnosticsArpEntry]): A list of InterconnectDiagnostics.ARPEntry objects, describing individual neighbors currently seen by the Google router in the ARP cache for the Interconnect. This will be empty when the Interconnect is not bundled. Defaults to: `null`.
  - links ([InterconnectDiagnosticsLinkStatus]): A list of InterconnectDiagnostics.LinkStatus objects, describing the status for each link on the Interconnect. Defaults to: `null`.
  - macAddress (String.t): The MAC address of the Interconnect&#39;s bundle interface. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :arpCaches => list(GoogleApi.Compute.V1.Model.InterconnectDiagnosticsArpEntry.t()),
          :links => list(GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkStatus.t()),
          :macAddress => any()
        }

  field(:arpCaches, as: GoogleApi.Compute.V1.Model.InterconnectDiagnosticsArpEntry, type: :list)
  field(:links, as: GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkStatus, type: :list)
  field(:macAddress)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.InterconnectDiagnostics do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.InterconnectDiagnostics.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.InterconnectDiagnostics do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
