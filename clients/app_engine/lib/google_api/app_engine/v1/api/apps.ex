# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.AppEngine.V1.Api.Apps do
  @moduledoc """
  API calls for all endpoints tagged `Apps`.
  """

  alias GoogleApi.AppEngine.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Uploads the specified SSL certificate.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Application resource. Example: apps/myapp.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (AuthorizedCertificate): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.AuthorizedCertificate{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_authorized_certificates_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.AuthorizedCertificate.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_authorized_certificates_create(
        connection,
        apps_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/apps/{appsId}/authorizedCertificates", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.AuthorizedCertificate{}])
  end

  @doc """
  Deletes the specified SSL certificate.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource to delete. Example: apps/myapp/authorizedCertificates/12345.
  - authorized_certificates_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_authorized_certificates_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_authorized_certificates_delete(
        connection,
        apps_id,
        authorized_certificates_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "authorizedCertificatesId" => URI.encode_www_form(authorized_certificates_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Empty{}])
  end

  @doc """
  Gets the specified SSL certificate.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource requested. Example: apps/myapp/authorizedCertificates/12345.
  - authorized_certificates_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :view (String.t): Controls the set of fields returned in the GET response.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.AuthorizedCertificate{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_authorized_certificates_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AppEngine.V1.Model.AuthorizedCertificate.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_authorized_certificates_get(
        connection,
        apps_id,
        authorized_certificates_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :view => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "authorizedCertificatesId" => URI.encode_www_form(authorized_certificates_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.AuthorizedCertificate{}])
  end

  @doc """
  Lists all SSL certificates the user is authorized to administer.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Application resource. Example: apps/myapp.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Maximum results to return per page.
    - :pageToken (String.t): Continuation token for fetching the next page of results.
    - :view (String.t): Controls the set of fields returned in the LIST response.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.ListAuthorizedCertificatesResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_authorized_certificates_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.ListAuthorizedCertificatesResponse.t()}
          | {:error, Tesla.Env.t()}
  def appengine_apps_authorized_certificates_list(
        connection,
        apps_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query,
      :view => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/authorizedCertificates", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AppEngine.V1.Model.ListAuthorizedCertificatesResponse{}]
    )
  end

  @doc """
  Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource to update. Example: apps/myapp/authorizedCertificates/12345.
  - authorized_certificates_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :updateMask (String.t): Standard field mask for the set of fields to be updated. Updates are only supported on the certificate_raw_data and display_name fields.
    - :body (AuthorizedCertificate): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.AuthorizedCertificate{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_authorized_certificates_patch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AppEngine.V1.Model.AuthorizedCertificate.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_authorized_certificates_patch(
        connection,
        apps_id,
        authorized_certificates_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "authorizedCertificatesId" => URI.encode_www_form(authorized_certificates_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.AuthorizedCertificate{}])
  end

  @doc """
  Lists all domains the user is authorized to administer.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Application resource. Example: apps/myapp.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Maximum results to return per page.
    - :pageToken (String.t): Continuation token for fetching the next page of results.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.ListAuthorizedDomainsResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_authorized_domains_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.ListAuthorizedDomainsResponse.t()}
          | {:error, Tesla.Env.t()}
  def appengine_apps_authorized_domains_list(
        connection,
        apps_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/authorizedDomains", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AppEngine.V1.Model.ListAuthorizedDomainsResponse{}]
    )
  end

  @doc """
  Creates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects, Applications, and Billing (https://cloud.google.com/appengine/docs/standard/python/console/).

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (Application): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_create(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_create(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/apps")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Application resource. Example: apps/myapp.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :overrideStrategy (String.t): Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
    - :body (DomainMapping): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_domain_mappings_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_domain_mappings_create(
        connection,
        apps_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :overrideStrategy => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/apps/{appsId}/domainMappings", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource to delete. Example: apps/myapp/domainMappings/example.com.
  - domain_mappings_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_domain_mappings_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_domain_mappings_delete(
        connection,
        apps_id,
        domain_mappings_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1/apps/{appsId}/domainMappings/{domainMappingsId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "domainMappingsId" => URI.encode_www_form(domain_mappings_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Gets the specified domain mapping.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource requested. Example: apps/myapp/domainMappings/example.com.
  - domain_mappings_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.DomainMapping{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_domain_mappings_get(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.DomainMapping.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_domain_mappings_get(
        connection,
        apps_id,
        domain_mappings_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/domainMappings/{domainMappingsId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "domainMappingsId" => URI.encode_www_form(domain_mappings_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.DomainMapping{}])
  end

  @doc """
  Lists the domain mappings on an application.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Application resource. Example: apps/myapp.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Maximum results to return per page.
    - :pageToken (String.t): Continuation token for fetching the next page of results.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.ListDomainMappingsResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_domain_mappings_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.ListDomainMappingsResponse.t()}
          | {:error, Tesla.Env.t()}
  def appengine_apps_domain_mappings_list(connection, apps_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/domainMappings", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AppEngine.V1.Model.ListDomainMappingsResponse{}]
    )
  end

  @doc """
  Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource to update. Example: apps/myapp/domainMappings/example.com.
  - domain_mappings_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :updateMask (String.t): Standard field mask for the set of fields to be updated.
    - :body (DomainMapping): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_domain_mappings_patch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_domain_mappings_patch(
        connection,
        apps_id,
        domain_mappings_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1/apps/{appsId}/domainMappings/{domainMappingsId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "domainMappingsId" => URI.encode_www_form(domain_mappings_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Replaces the entire firewall ruleset in one bulk operation. This overrides and replaces the rules of an existing firewall with the new rules.If the final rule does not match traffic with the &#39;*&#39; wildcard IP range, then an \&quot;allow all\&quot; rule is explicitly added to the end of the list.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the Firewall collection to set. Example: apps/myapp/firewall/ingressRules.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (BatchUpdateIngressRulesRequest): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.BatchUpdateIngressRulesResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_firewall_ingress_rules_batch_update(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AppEngine.V1.Model.BatchUpdateIngressRulesResponse.t()}
          | {:error, Tesla.Env.t()}
  def appengine_apps_firewall_ingress_rules_batch_update(
        connection,
        apps_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/apps/{appsId}/firewall/ingressRules:batchUpdate", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AppEngine.V1.Model.BatchUpdateIngressRulesResponse{}]
    )
  end

  @doc """
  Creates a firewall rule for the application.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Firewall collection in which to create a new rule. Example: apps/myapp/firewall/ingressRules.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (FirewallRule): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.FirewallRule{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_firewall_ingress_rules_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.FirewallRule.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_firewall_ingress_rules_create(
        connection,
        apps_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/apps/{appsId}/firewall/ingressRules", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.FirewallRule{}])
  end

  @doc """
  Deletes the specified firewall rule.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the Firewall resource to delete. Example: apps/myapp/firewall/ingressRules/100.
  - ingress_rules_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_firewall_ingress_rules_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_firewall_ingress_rules_delete(
        connection,
        apps_id,
        ingress_rules_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "ingressRulesId" => URI.encode_www_form(ingress_rules_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Empty{}])
  end

  @doc """
  Gets the specified firewall rule.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the Firewall resource to retrieve. Example: apps/myapp/firewall/ingressRules/100.
  - ingress_rules_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.FirewallRule{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_firewall_ingress_rules_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.FirewallRule.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_firewall_ingress_rules_get(
        connection,
        apps_id,
        ingress_rules_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "ingressRulesId" => URI.encode_www_form(ingress_rules_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.FirewallRule{}])
  end

  @doc """
  Lists the firewall rules of an application.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the Firewall collection to retrieve. Example: apps/myapp/firewall/ingressRules.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :matchingAddress (String.t): A valid IP Address. If set, only rules matching this address will be returned. The first returned rule will be the rule that fires on requests from this IP.
    - :pageSize (integer()): Maximum results to return per page.
    - :pageToken (String.t): Continuation token for fetching the next page of results.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.ListIngressRulesResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_firewall_ingress_rules_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.ListIngressRulesResponse.t()}
          | {:error, Tesla.Env.t()}
  def appengine_apps_firewall_ingress_rules_list(
        connection,
        apps_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :matchingAddress => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/firewall/ingressRules", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.ListIngressRulesResponse{}])
  end

  @doc """
  Updates the specified firewall rule.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the Firewall resource to update. Example: apps/myapp/firewall/ingressRules/100.
  - ingress_rules_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :updateMask (String.t): Standard field mask for the set of fields to be updated.
    - :body (FirewallRule): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.FirewallRule{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_firewall_ingress_rules_patch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.FirewallRule.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_firewall_ingress_rules_patch(
        connection,
        apps_id,
        ingress_rules_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1/apps/{appsId}/firewall/ingressRules/{ingressRulesId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "ingressRulesId" => URI.encode_www_form(ingress_rules_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.FirewallRule{}])
  end

  @doc """
  Gets information about an application.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the Application resource to get. Example: apps/myapp.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Application{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Application.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_get(connection, apps_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Application{}])
  end

  @doc """
  Gets information about a location.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Resource name for the location.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Location{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_locations_get(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Location.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_locations_get(
        connection,
        apps_id,
        locations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/locations/{locationsId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "locationsId" => URI.encode_www_form(locations_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Location{}])
  end

  @doc """
  Lists information about the supported locations for this service.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. The resource that owns the locations collection, if applicable.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :filter (String.t): The standard list filter.
    - :pageSize (integer()): The standard list page size.
    - :pageToken (String.t): The standard list page token.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.ListLocationsResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_locations_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.ListLocationsResponse.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_locations_list(connection, apps_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :filter => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/locations", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.ListLocationsResponse{}])
  end

  @doc """
  Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. The name of the operation resource.
  - operations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_operations_get(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_operations_get(
        connection,
        apps_id,
        operations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/operations/{operationsId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "operationsId" => URI.encode_www_form(operations_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \&quot;/v1/{name&#x3D;users/*}/operations\&quot; to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. The name of the operation&#39;s parent resource.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :filter (String.t): The standard list filter.
    - :pageSize (integer()): The standard list page size.
    - :pageToken (String.t): The standard list page token.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.ListOperationsResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_operations_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.ListOperationsResponse.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_operations_list(connection, apps_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :filter => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/operations", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.ListOperationsResponse{}])
  end

  @doc """
  Updates the specified Application resource. You can update the following fields: auth_domain - Google authentication domain for controlling user access to the application. default_cookie_expiration - Cookie expiration policy for the application.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the Application resource to update. Example: apps/myapp.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :updateMask (String.t): Standard field mask for the set of fields to be updated.
    - :body (Application): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_patch(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_patch(connection, apps_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1/apps/{appsId}", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Recreates the required App Engine features for the specified App Engine application, for example a Cloud Storage bucket or App Engine service account. Use this method if you receive an error message about a missing feature, for example, Error retrieving the App Engine service account.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the application to repair. Example: apps/myapp
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (RepairApplicationRequest): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_repair(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_repair(connection, apps_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/apps/{appsId}:repair", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Deletes the specified service and all enclosed versions.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource requested. Example: apps/myapp/services/default.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_delete(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_delete(
        connection,
        apps_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1/apps/{appsId}/services/{servicesId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "servicesId" => URI.encode_www_form(services_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Gets the current configuration of the specified service.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource requested. Example: apps/myapp/services/default.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Service{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_get(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Service.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_get(
        connection,
        apps_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/services/{servicesId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "servicesId" => URI.encode_www_form(services_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Service{}])
  end

  @doc """
  Lists all the services in the application.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Application resource. Example: apps/myapp.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Maximum results to return per page.
    - :pageToken (String.t): Continuation token for fetching the next page of results.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.ListServicesResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.ListServicesResponse.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_list(connection, apps_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/services", %{
        "appsId" => URI.encode_www_form(apps_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.ListServicesResponse{}])
  end

  @doc """
  Updates the configuration of the specified service.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource to update. Example: apps/myapp/services/default.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :migrateTraffic (boolean()): Set to true to gradually shift traffic to one or more versions that you specify. By default, traffic is shifted immediately. For gradual traffic migration, the target versions must be located within instances that are configured for both warmup requests (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#InboundServiceType) and automatic scaling (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#AutomaticScaling). You must specify the shardBy (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services#ShardBy) field in the Service resource. Gradual traffic migration is not supported in the App Engine flexible environment. For examples, see Migrating and Splitting Traffic (https://cloud.google.com/appengine/docs/admin-api/migrating-splitting-traffic).
    - :updateMask (String.t): Standard field mask for the set of fields to be updated.
    - :body (Service): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_patch(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_patch(
        connection,
        apps_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :migrateTraffic => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1/apps/{appsId}/services/{servicesId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "servicesId" => URI.encode_www_form(services_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Deploys code and resource files to a new version.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent resource to create this version under. Example: apps/myapp/services/default.
  - services_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (Version): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_versions_create(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_versions_create(
        connection,
        apps_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/apps/{appsId}/services/{servicesId}/versions", %{
        "appsId" => URI.encode_www_form(apps_id),
        "servicesId" => URI.encode_www_form(services_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Deletes an existing Version resource.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - versions_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_versions_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_versions_delete(
        connection,
        apps_id,
        services_id,
        versions_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "servicesId" => URI.encode_www_form(services_id),
        "versionsId" => URI.encode_www_form(versions_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - versions_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :view (String.t): Controls the set of fields returned in the Get response.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Version{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_versions_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Version.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_versions_get(
        connection,
        apps_id,
        services_id,
        versions_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :view => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "servicesId" => URI.encode_www_form(services_id),
        "versionsId" => URI.encode_www_form(versions_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Version{}])
  end

  @doc """
  Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in \&quot;debug mode\&quot;, the instance continues to serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable for instances in App Engine flexible environment.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - versions_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - instances_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (DebugInstanceRequest): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_versions_instances_debug(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_versions_instances_debug(
        connection,
        apps_id,
        services_id,
        versions_id,
        instances_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug",
        %{
          "appsId" => URI.encode_www_form(apps_id),
          "servicesId" => URI.encode_www_form(services_id),
          "versionsId" => URI.encode_www_form(versions_id),
          "instancesId" => URI.encode_www_form(instances_id)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Stops a running instance.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - versions_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - instances_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_versions_instances_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_versions_instances_delete(
        connection,
        apps_id,
        services_id,
        versions_id,
        instances_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}",
        %{
          "appsId" => URI.encode_www_form(apps_id),
          "servicesId" => URI.encode_www_form(services_id),
          "versionsId" => URI.encode_www_form(versions_id),
          "instancesId" => URI.encode_www_form(instances_id)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end

  @doc """
  Gets instance information.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - versions_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - instances_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Instance{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_versions_instances_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Instance.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_versions_instances_get(
        connection,
        apps_id,
        services_id,
        versions_id,
        instances_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}",
        %{
          "appsId" => URI.encode_www_form(apps_id),
          "servicesId" => URI.encode_www_form(services_id),
          "versionsId" => URI.encode_www_form(versions_id),
          "instancesId" => URI.encode_www_form(instances_id)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Instance{}])
  end

  @doc """
  Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Version resource. Example: apps/myapp/services/default/versions/v1.
  - services_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;appsId&#x60;.
  - versions_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Maximum results to return per page.
    - :pageToken (String.t): Continuation token for fetching the next page of results.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.ListInstancesResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_versions_instances_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AppEngine.V1.Model.ListInstancesResponse.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_versions_instances_list(
        connection,
        apps_id,
        services_id,
        versions_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances", %{
        "appsId" => URI.encode_www_form(apps_id),
        "servicesId" => URI.encode_www_form(services_id),
        "versionsId" => URI.encode_www_form(versions_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.ListInstancesResponse{}])
  end

  @doc """
  Lists the versions of a service.

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Service resource. Example: apps/myapp/services/default.
  - services_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Maximum results to return per page.
    - :pageToken (String.t): Continuation token for fetching the next page of results.
    - :view (String.t): Controls the set of fields returned in the List response.

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.ListVersionsResponse{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_versions_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AppEngine.V1.Model.ListVersionsResponse.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_versions_list(
        connection,
        apps_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query,
      :view => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/apps/{appsId}/services/{servicesId}/versions", %{
        "appsId" => URI.encode_www_form(apps_id),
        "servicesId" => URI.encode_www_form(services_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.ListVersionsResponse{}])
  end

  @doc """
  Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_cpu_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_throughput_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment: serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)Flexible environment serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment: automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)

  ## Parameters

  - connection (GoogleApi.AppEngine.V1.Connection): Connection to server
  - apps_id (String.t): Part of &#x60;name&#x60;. Name of the resource to update. Example: apps/myapp/services/default/versions/1.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - versions_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;appsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :updateMask (String.t): Standard field mask for the set of fields to be updated.
    - :body (Version): 

  ## Returns

  {:ok, %GoogleApi.AppEngine.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec appengine_apps_services_versions_patch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AppEngine.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def appengine_apps_services_versions_patch(
        connection,
        apps_id,
        services_id,
        versions_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}", %{
        "appsId" => URI.encode_www_form(apps_id),
        "servicesId" => URI.encode_www_form(services_id),
        "versionsId" => URI.encode_www_form(versions_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AppEngine.V1.Model.Operation{}])
  end
end
