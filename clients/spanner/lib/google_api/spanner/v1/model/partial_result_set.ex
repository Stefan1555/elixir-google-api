# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Spanner.V1.Model.PartialResultSet do
  @moduledoc """
  Partial results from a streaming read or SQL query. Streaming reads and SQL queries better tolerate large result sets, large rows, and large values, but are a little trickier to consume.

  ## Attributes

  - chunkedValue (boolean()): If true, then the final value in values is chunked, and must be combined with more values from subsequent &#x60;PartialResultSet&#x60;s to obtain a complete field value. Defaults to: `null`.
  - metadata (ResultSetMetadata): Metadata about the result set, such as row type information. Only present in the first response. Defaults to: `null`.
  - resumeToken (binary()): Streaming calls might be interrupted for a variety of reasons, such as TCP connection loss. If this occurs, the stream of results can be resumed by re-sending the original request and including &#x60;resume_token&#x60;. Note that executing any other transaction in the same session invalidates the token. Defaults to: `null`.
  - stats (ResultSetStats): Query plan and execution statistics for the statement that produced this streaming result set. These can be requested by setting ExecuteSqlRequest.query_mode and are sent only once with the last response in the stream. This field will also be present in the last response for DML statements. Defaults to: `null`.
  - values ([String.t]): A streamed result set consists of a stream of values, which might be split into many &#x60;PartialResultSet&#x60; messages to accommodate large rows and/or large values. Every N complete values defines a row, where N is equal to the number of entries in metadata.row_type.fields.  Most values are encoded based on type as described here.  It is possible that the last value in values is \&quot;chunked\&quot;, meaning that the rest of the value is sent in subsequent &#x60;PartialResultSet&#x60;(s). This is denoted by the chunked_value field. Two or more chunked values can be merged to form a complete value as follows:    * &#x60;bool/number/null&#x60;: cannot be chunked   * &#x60;string&#x60;: concatenate the strings   * &#x60;list&#x60;: concatenate the lists. If the last element in a list is a     &#x60;string&#x60;, &#x60;list&#x60;, or &#x60;object&#x60;, merge it with the first element in     the next list by applying these rules recursively.   * &#x60;object&#x60;: concatenate the (field name, field value) pairs. If a     field name is duplicated, then apply these rules recursively     to merge the field values.  Some examples of merging:      # Strings are concatenated.     \&quot;foo\&quot;, \&quot;bar\&quot; &#x3D;&gt; \&quot;foobar\&quot;      # Lists of non-strings are concatenated.     [2, 3], [4] &#x3D;&gt; [2, 3, 4]      # Lists are concatenated, but the last and first elements are merged     # because they are strings.     [\&quot;a\&quot;, \&quot;b\&quot;], [\&quot;c\&quot;, \&quot;d\&quot;] &#x3D;&gt; [\&quot;a\&quot;, \&quot;bc\&quot;, \&quot;d\&quot;]      # Lists are concatenated, but the last and first elements are merged     # because they are lists. Recursively, the last and first elements     # of the inner lists are merged because they are strings.     [\&quot;a\&quot;, [\&quot;b\&quot;, \&quot;c\&quot;]], [[\&quot;d\&quot;], \&quot;e\&quot;] &#x3D;&gt; [\&quot;a\&quot;, [\&quot;b\&quot;, \&quot;cd\&quot;], \&quot;e\&quot;]      # Non-overlapping object fields are combined.     {\&quot;a\&quot;: \&quot;1\&quot;}, {\&quot;b\&quot;: \&quot;2\&quot;} &#x3D;&gt; {\&quot;a\&quot;: \&quot;1\&quot;, \&quot;b\&quot;: 2\&quot;}      # Overlapping object fields are merged.     {\&quot;a\&quot;: \&quot;1\&quot;}, {\&quot;a\&quot;: \&quot;2\&quot;} &#x3D;&gt; {\&quot;a\&quot;: \&quot;12\&quot;}      # Examples of merging objects containing lists of strings.     {\&quot;a\&quot;: [\&quot;1\&quot;]}, {\&quot;a\&quot;: [\&quot;2\&quot;]} &#x3D;&gt; {\&quot;a\&quot;: [\&quot;12\&quot;]}  For a more complete example, suppose a streaming SQL query is yielding a result set whose rows contain a single string field. The following &#x60;PartialResultSet&#x60;s might be yielded:      {       \&quot;metadata\&quot;: { ... }       \&quot;values\&quot;: [\&quot;Hello\&quot;, \&quot;W\&quot;]       \&quot;chunked_value\&quot;: true       \&quot;resume_token\&quot;: \&quot;Af65...\&quot;     }     {       \&quot;values\&quot;: [\&quot;orl\&quot;]       \&quot;chunked_value\&quot;: true       \&quot;resume_token\&quot;: \&quot;Bqp2...\&quot;     }     {       \&quot;values\&quot;: [\&quot;d\&quot;]       \&quot;resume_token\&quot;: \&quot;Zx1B...\&quot;     }  This sequence of &#x60;PartialResultSet&#x60;s encodes two rows, one containing the field value &#x60;\&quot;Hello\&quot;&#x60;, and a second containing the field value &#x60;\&quot;World\&quot; &#x3D; \&quot;W\&quot; + \&quot;orl\&quot; + \&quot;d\&quot;&#x60;. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :chunkedValue => any(),
          :metadata => GoogleApi.Spanner.V1.Model.ResultSetMetadata.t(),
          :resumeToken => any(),
          :stats => GoogleApi.Spanner.V1.Model.ResultSetStats.t(),
          :values => list(any())
        }

  field(:chunkedValue)
  field(:metadata, as: GoogleApi.Spanner.V1.Model.ResultSetMetadata)
  field(:resumeToken)
  field(:stats, as: GoogleApi.Spanner.V1.Model.ResultSetStats)
  field(:values, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Spanner.V1.Model.PartialResultSet do
  def decode(value, options) do
    GoogleApi.Spanner.V1.Model.PartialResultSet.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Spanner.V1.Model.PartialResultSet do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
