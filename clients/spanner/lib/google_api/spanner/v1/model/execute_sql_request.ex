# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Spanner.V1.Model.ExecuteSqlRequest do
  @moduledoc """
  The request for ExecuteSql and ExecuteStreamingSql.

  ## Attributes

  - paramTypes (%{optional(String.t) &#x3D;&gt; Type}): It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value.  For example, values of type &#x60;BYTES&#x60; and values of type &#x60;STRING&#x60; both appear in params as JSON strings.  In these cases, &#x60;param_types&#x60; can be used to specify the exact SQL type for some or all of the SQL statement parameters. See the definition of Type for more information about SQL types. Defaults to: `null`.
  - params (%{optional(String.t) &#x3D;&gt; String.t}): The SQL string can contain parameter placeholders. A parameter placeholder consists of &#x60;&#39;@&#39;&#x60; followed by the parameter name. Parameter names consist of any combination of letters, numbers, and underscores.  Parameters can appear anywhere that a literal value is expected.  The same parameter name can be used more than once, for example:   &#x60;\&quot;WHERE id &gt; @msg_id AND id &lt; @msg_id + 100\&quot;&#x60;  It is an error to execute an SQL statement with unbound parameters.  Parameter values are specified using &#x60;params&#x60;, which is a JSON object whose keys are parameter names, and whose values are the corresponding parameter values. Defaults to: `null`.
  - partitionToken (binary()): If present, results will be restricted to the specified partition previously created using PartitionQuery().  There must be an exact match for the values of fields common to this message and the PartitionQueryRequest message used to create this partition_token. Defaults to: `null`.
  - queryMode (String.t): Used to control the amount of debugging information returned in ResultSetStats. If partition_token is set, query_mode can only be set to QueryMode.NORMAL. Defaults to: `null`.
    - Enum - one of [NORMAL, PLAN, PROFILE]
  - resumeToken (binary()): If this request is resuming a previously interrupted SQL statement execution, &#x60;resume_token&#x60; should be copied from the last PartialResultSet yielded before the interruption. Doing this enables the new SQL statement execution to resume where the last one left off. The rest of the request parameters must exactly match the request that yielded this token. Defaults to: `null`.
  - seqno (String.t): A per-transaction sequence number used to identify this request. This makes each request idempotent such that if the request is received multiple times, at most one will succeed.  The sequence number must be monotonically increasing within the transaction. If a request arrives for the first time with an out-of-order sequence number, the transaction may be aborted. Replays of previously handled requests will yield the same response as the first execution.  Required for DML statements. Ignored for queries. Defaults to: `null`.
  - sql (String.t): Required. The SQL string. Defaults to: `null`.
  - transaction (TransactionSelector): The transaction to use. If none is provided, the default is a temporary read-only transaction with strong concurrency.  The transaction to use.  For queries, if none is provided, the default is a temporary read-only transaction with strong concurrency.  Standard DML statements require a ReadWrite transaction. Single-use transactions are not supported (to avoid replay).  The caller must either supply an existing transaction ID or begin a new transaction.  Partitioned DML requires an existing PartitionedDml transaction ID. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :paramTypes => map(),
          :params => map(),
          :partitionToken => any(),
          :queryMode => any(),
          :resumeToken => any(),
          :seqno => any(),
          :sql => any(),
          :transaction => GoogleApi.Spanner.V1.Model.TransactionSelector.t()
        }

  field(:paramTypes, as: GoogleApi.Spanner.V1.Model.Type, type: :map)
  field(:params, type: :map)
  field(:partitionToken)
  field(:queryMode)
  field(:resumeToken)
  field(:seqno)
  field(:sql)
  field(:transaction, as: GoogleApi.Spanner.V1.Model.TransactionSelector)
end

defimpl Poison.Decoder, for: GoogleApi.Spanner.V1.Model.ExecuteSqlRequest do
  def decode(value, options) do
    GoogleApi.Spanner.V1.Model.ExecuteSqlRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Spanner.V1.Model.ExecuteSqlRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
