# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Redis.V1beta1.Model.Location do
  @moduledoc """
  A resource that represents Google Cloud Platform location.

  ## Attributes

  - displayName (String.t): The friendly name for this location, typically a nearby city name. For example, \&quot;Tokyo\&quot;. Defaults to: `null`.
  - labels (%{optional(String.t) &#x3D;&gt; String.t}): Cross-service attributes for the location. For example      {\&quot;cloud.googleapis.com/region\&quot;: \&quot;us-east1\&quot;} Defaults to: `null`.
  - locationId (String.t): Resource ID for the region. For example: \&quot;us-east1\&quot;. Defaults to: `null`.
  - metadata (%{optional(String.t) &#x3D;&gt; String.t}): Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by Compute Engine. These keys can be specified in &#x60;location_id&#x60; or &#x60;alternative_location_id&#x60; fields when creating a Redis instance. Defaults to: `null`.
  - name (String.t): Full resource name for the region. For example: \&quot;projects/example-project/locations/us-east1\&quot;. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :displayName => any(),
          :labels => map(),
          :locationId => any(),
          :metadata => map(),
          :name => any()
        }

  field(:displayName)
  field(:labels, type: :map)
  field(:locationId)
  field(:metadata, type: :map)
  field(:name)
end

defimpl Poison.Decoder, for: GoogleApi.Redis.V1beta1.Model.Location do
  def decode(value, options) do
    GoogleApi.Redis.V1beta1.Model.Location.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Redis.V1beta1.Model.Location do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
