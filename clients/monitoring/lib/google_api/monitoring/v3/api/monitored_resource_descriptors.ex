# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Monitoring.V3.Api.MonitoredResourceDescriptors do
  @moduledoc """
  API calls for all endpoints tagged `MonitoredResourceDescriptors`.
  """

  alias GoogleApi.Monitoring.V3.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Gets a single monitored resource descriptor. This method does not require a Stackdriver account.

  ## Parameters

  - connection (GoogleApi.Monitoring.V3.Connection): Connection to server
  - v3_id (String.t): Part of &#x60;name&#x60;. The monitored resource descriptor to get. The format is \&quot;projects/{project_id_or_number}/monitoredResourceDescriptors/{resource_type}\&quot;. The {resource_type} is a predefined type, such as cloudsql_database.
  - v3_id1 (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;v3Id&#x60;.
  - monitored_resource_descriptors_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;v3Id&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.

  ## Returns

  {:ok, %GoogleApi.Monitoring.V3.Model.MonitoredResourceDescriptor{}} on success
  {:error, info} on failure
  """
  @spec monitoring_monitored_resource_descriptors_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.Monitoring.V3.Model.MonitoredResourceDescriptor.t()}
          | {:error, Tesla.Env.t()}
  def monitoring_monitored_resource_descriptors_get(
        connection,
        v3_id,
        v3_id1,
        monitored_resource_descriptors_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v3/{v3Id}/{v3Id1}/monitoredResourceDescriptors/{monitoredResourceDescriptorsId}",
        %{
          "v3Id" => URI.encode_www_form(v3_id),
          "v3Id1" => URI.encode_www_form(v3_id1),
          "monitoredResourceDescriptorsId" =>
            URI.encode_www_form(monitored_resource_descriptors_id)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.Monitoring.V3.Model.MonitoredResourceDescriptor{}]
    )
  end

  @doc """
  Lists monitored resource descriptors that match a filter. This method does not require a Stackdriver account.

  ## Parameters

  - connection (GoogleApi.Monitoring.V3.Connection): Connection to server
  - v3_id (String.t): Part of &#x60;name&#x60;. The project on which to execute the request. The format is \&quot;projects/{project_id_or_number}\&quot;.
  - v3_id1 (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;v3Id&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :pageToken (String.t): If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.
    - :pageSize (integer()): A positive number that is the maximum number of results to return.
    - :filter (String.t): An optional filter describing the descriptors to be returned. The filter can reference the descriptor&#39;s type and labels. For example, the following filter returns only Google Compute Engine descriptors that have an id label: resource.type &#x3D; starts_with(\&quot;gce_\&quot;) AND resource.label:id 

  ## Returns

  {:ok, %GoogleApi.Monitoring.V3.Model.ListMonitoredResourceDescriptorsResponse{}} on success
  {:error, info} on failure
  """
  @spec monitoring_monitored_resource_descriptors_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.Monitoring.V3.Model.ListMonitoredResourceDescriptorsResponse.t()}
          | {:error, Tesla.Env.t()}
  def monitoring_monitored_resource_descriptors_list(
        connection,
        v3_id,
        v3_id1,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :pageToken => :query,
      :pageSize => :query,
      :filter => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v3/{v3Id}/{v3Id1}/monitoredResourceDescriptors", %{
        "v3Id" => URI.encode_www_form(v3_id),
        "v3Id1" => URI.encode_www_form(v3_id1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.Monitoring.V3.Model.ListMonitoredResourceDescriptorsResponse{}]
    )
  end
end
