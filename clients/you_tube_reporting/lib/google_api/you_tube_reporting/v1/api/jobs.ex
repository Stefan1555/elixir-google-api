# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.YouTubeReporting.V1.Api.Jobs do
  @moduledoc """
  API calls for all endpoints tagged `Jobs`.
  """

  alias GoogleApi.YouTubeReporting.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Creates a job and returns it.

  ## Parameters

  - connection (GoogleApi.YouTubeReporting.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :onBehalfOfContentOwner (String.t): The content owner&#39;s external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).
    - :body (Job): 

  ## Returns

  {:ok, %GoogleApi.YouTubeReporting.V1.Model.Job{}} on success
  {:error, info} on failure
  """
  @spec youtubereporting_jobs_create(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.YouTubeReporting.V1.Model.Job.t()} | {:error, Tesla.Env.t()}
  def youtubereporting_jobs_create(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :onBehalfOfContentOwner => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/jobs")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.YouTubeReporting.V1.Model.Job{}])
  end

  @doc """
  Deletes a job.

  ## Parameters

  - connection (GoogleApi.YouTubeReporting.V1.Connection): Connection to server
  - job_id (String.t): The ID of the job to delete.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :onBehalfOfContentOwner (String.t): The content owner&#39;s external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).

  ## Returns

  {:ok, %GoogleApi.YouTubeReporting.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec youtubereporting_jobs_delete(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.YouTubeReporting.V1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def youtubereporting_jobs_delete(connection, job_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :onBehalfOfContentOwner => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1/jobs/{jobId}", %{
        "jobId" => URI.encode_www_form(job_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.YouTubeReporting.V1.Model.Empty{}])
  end

  @doc """
  Gets a job.

  ## Parameters

  - connection (GoogleApi.YouTubeReporting.V1.Connection): Connection to server
  - job_id (String.t): The ID of the job to retrieve.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :onBehalfOfContentOwner (String.t): The content owner&#39;s external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).

  ## Returns

  {:ok, %GoogleApi.YouTubeReporting.V1.Model.Job{}} on success
  {:error, info} on failure
  """
  @spec youtubereporting_jobs_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.YouTubeReporting.V1.Model.Job.t()} | {:error, Tesla.Env.t()}
  def youtubereporting_jobs_get(connection, job_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :onBehalfOfContentOwner => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/jobs/{jobId}", %{
        "jobId" => URI.encode_www_form(job_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.YouTubeReporting.V1.Model.Job{}])
  end

  @doc """
  Lists jobs.

  ## Parameters

  - connection (GoogleApi.YouTubeReporting.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :includeSystemManaged (boolean()): If set to true, also system-managed jobs will be returned; otherwise only user-created jobs will be returned. System-managed jobs can neither be modified nor deleted.
    - :onBehalfOfContentOwner (String.t): The content owner&#39;s external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).
    - :pageSize (integer()): Requested page size. Server may return fewer jobs than requested. If unspecified, server will pick an appropriate default.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListReportTypesResponse.next_page_token returned in response to the previous call to the &#x60;ListJobs&#x60; method.

  ## Returns

  {:ok, %GoogleApi.YouTubeReporting.V1.Model.ListJobsResponse{}} on success
  {:error, info} on failure
  """
  @spec youtubereporting_jobs_list(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.YouTubeReporting.V1.Model.ListJobsResponse.t()}
          | {:error, Tesla.Env.t()}
  def youtubereporting_jobs_list(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :includeSystemManaged => :query,
      :onBehalfOfContentOwner => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/jobs")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.YouTubeReporting.V1.Model.ListJobsResponse{}])
  end

  @doc """
  Gets the metadata of a specific report.

  ## Parameters

  - connection (GoogleApi.YouTubeReporting.V1.Connection): Connection to server
  - job_id (String.t): The ID of the job.
  - report_id (String.t): The ID of the report to retrieve.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :onBehalfOfContentOwner (String.t): The content owner&#39;s external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).

  ## Returns

  {:ok, %GoogleApi.YouTubeReporting.V1.Model.Report{}} on success
  {:error, info} on failure
  """
  @spec youtubereporting_jobs_reports_get(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.YouTubeReporting.V1.Model.Report.t()} | {:error, Tesla.Env.t()}
  def youtubereporting_jobs_reports_get(
        connection,
        job_id,
        report_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :onBehalfOfContentOwner => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/jobs/{jobId}/reports/{reportId}", %{
        "jobId" => URI.encode_www_form(job_id),
        "reportId" => URI.encode_www_form(report_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.YouTubeReporting.V1.Model.Report{}])
  end

  @doc """
  Lists reports created by a specific job. Returns NOT_FOUND if the job does not exist.

  ## Parameters

  - connection (GoogleApi.YouTubeReporting.V1.Connection): Connection to server
  - job_id (String.t): The ID of the job.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :createdAfter (DateTime.t): If set, only reports created after the specified date/time are returned.
    - :onBehalfOfContentOwner (String.t): The content owner&#39;s external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).
    - :pageSize (integer()): Requested page size. Server may return fewer report types than requested. If unspecified, server will pick an appropriate default.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListReportsResponse.next_page_token returned in response to the previous call to the &#x60;ListReports&#x60; method.
    - :startTimeAtOrAfter (DateTime.t): If set, only reports whose start time is greater than or equal the specified date/time are returned.
    - :startTimeBefore (DateTime.t): If set, only reports whose start time is smaller than the specified date/time are returned.

  ## Returns

  {:ok, %GoogleApi.YouTubeReporting.V1.Model.ListReportsResponse{}} on success
  {:error, info} on failure
  """
  @spec youtubereporting_jobs_reports_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.YouTubeReporting.V1.Model.ListReportsResponse.t()}
          | {:error, Tesla.Env.t()}
  def youtubereporting_jobs_reports_list(connection, job_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :createdAfter => :query,
      :onBehalfOfContentOwner => :query,
      :pageSize => :query,
      :pageToken => :query,
      :startTimeAtOrAfter => :query,
      :startTimeBefore => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/jobs/{jobId}/reports", %{
        "jobId" => URI.encode_www_form(job_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.YouTubeReporting.V1.Model.ListReportsResponse{}]
    )
  end
end
