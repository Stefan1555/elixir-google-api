# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.YouTubeReporting.V1.Model.GdataMedia do
  @moduledoc """
  gdata

  ## Attributes

  - algorithm (String.t): gdata Defaults to: `null`.
  - bigstoreObjectRef (binary()): gdata Defaults to: `null`.
  - blobRef (binary()): gdata Defaults to: `null`.
  - blobstore2Info (GdataBlobstore2Info): gdata Defaults to: `null`.
  - compositeMedia ([GdataCompositeMedia]): gdata Defaults to: `null`.
  - contentType (String.t): gdata Defaults to: `null`.
  - contentTypeInfo (GdataContentTypeInfo): gdata Defaults to: `null`.
  - cosmoBinaryReference (binary()): gdata Defaults to: `null`.
  - crc32cHash (integer()): gdata Defaults to: `null`.
  - diffChecksumsResponse (GdataDiffChecksumsResponse): gdata Defaults to: `null`.
  - diffDownloadResponse (GdataDiffDownloadResponse): gdata Defaults to: `null`.
  - diffUploadRequest (GdataDiffUploadRequest): gdata Defaults to: `null`.
  - diffUploadResponse (GdataDiffUploadResponse): gdata Defaults to: `null`.
  - diffVersionResponse (GdataDiffVersionResponse): gdata Defaults to: `null`.
  - downloadParameters (GdataDownloadParameters): gdata Defaults to: `null`.
  - filename (String.t): gdata Defaults to: `null`.
  - hash (String.t): gdata Defaults to: `null`.
  - hashVerified (boolean()): gdata Defaults to: `null`.
  - inline (binary()): gdata Defaults to: `null`.
  - isPotentialRetry (boolean()): gdata Defaults to: `null`.
  - length (String.t): gdata Defaults to: `null`.
  - md5Hash (binary()): gdata Defaults to: `null`.
  - mediaId (binary()): gdata Defaults to: `null`.
  - objectId (GdataObjectId): gdata Defaults to: `null`.
  - path (String.t): gdata Defaults to: `null`.
  - referenceType (String.t): gdata Defaults to: `null`.
    - Enum - one of [PATH, BLOB_REF, INLINE, GET_MEDIA, COMPOSITE_MEDIA, BIGSTORE_REF, DIFF_VERSION_RESPONSE, DIFF_CHECKSUMS_RESPONSE, DIFF_DOWNLOAD_RESPONSE, DIFF_UPLOAD_REQUEST, DIFF_UPLOAD_RESPONSE, COSMO_BINARY_REFERENCE, ARBITRARY_BYTES]
  - sha1Hash (binary()): gdata Defaults to: `null`.
  - sha256Hash (binary()): gdata Defaults to: `null`.
  - timestamp (String.t): gdata Defaults to: `null`.
  - token (String.t): gdata Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :algorithm => any(),
          :bigstoreObjectRef => any(),
          :blobRef => any(),
          :blobstore2Info => GoogleApi.YouTubeReporting.V1.Model.GdataBlobstore2Info.t(),
          :compositeMedia => list(GoogleApi.YouTubeReporting.V1.Model.GdataCompositeMedia.t()),
          :contentType => any(),
          :contentTypeInfo => GoogleApi.YouTubeReporting.V1.Model.GdataContentTypeInfo.t(),
          :cosmoBinaryReference => any(),
          :crc32cHash => any(),
          :diffChecksumsResponse =>
            GoogleApi.YouTubeReporting.V1.Model.GdataDiffChecksumsResponse.t(),
          :diffDownloadResponse =>
            GoogleApi.YouTubeReporting.V1.Model.GdataDiffDownloadResponse.t(),
          :diffUploadRequest => GoogleApi.YouTubeReporting.V1.Model.GdataDiffUploadRequest.t(),
          :diffUploadResponse => GoogleApi.YouTubeReporting.V1.Model.GdataDiffUploadResponse.t(),
          :diffVersionResponse =>
            GoogleApi.YouTubeReporting.V1.Model.GdataDiffVersionResponse.t(),
          :downloadParameters => GoogleApi.YouTubeReporting.V1.Model.GdataDownloadParameters.t(),
          :filename => any(),
          :hash => any(),
          :hashVerified => any(),
          :inline => any(),
          :isPotentialRetry => any(),
          :length => any(),
          :md5Hash => any(),
          :mediaId => any(),
          :objectId => GoogleApi.YouTubeReporting.V1.Model.GdataObjectId.t(),
          :path => any(),
          :referenceType => any(),
          :sha1Hash => any(),
          :sha256Hash => any(),
          :timestamp => any(),
          :token => any()
        }

  field(:algorithm)
  field(:bigstoreObjectRef)
  field(:blobRef)
  field(:blobstore2Info, as: GoogleApi.YouTubeReporting.V1.Model.GdataBlobstore2Info)
  field(:compositeMedia, as: GoogleApi.YouTubeReporting.V1.Model.GdataCompositeMedia, type: :list)
  field(:contentType)
  field(:contentTypeInfo, as: GoogleApi.YouTubeReporting.V1.Model.GdataContentTypeInfo)
  field(:cosmoBinaryReference)
  field(:crc32cHash)

  field(
    :diffChecksumsResponse,
    as: GoogleApi.YouTubeReporting.V1.Model.GdataDiffChecksumsResponse
  )

  field(:diffDownloadResponse, as: GoogleApi.YouTubeReporting.V1.Model.GdataDiffDownloadResponse)
  field(:diffUploadRequest, as: GoogleApi.YouTubeReporting.V1.Model.GdataDiffUploadRequest)
  field(:diffUploadResponse, as: GoogleApi.YouTubeReporting.V1.Model.GdataDiffUploadResponse)
  field(:diffVersionResponse, as: GoogleApi.YouTubeReporting.V1.Model.GdataDiffVersionResponse)
  field(:downloadParameters, as: GoogleApi.YouTubeReporting.V1.Model.GdataDownloadParameters)
  field(:filename)
  field(:hash)
  field(:hashVerified)
  field(:inline)
  field(:isPotentialRetry)
  field(:length)
  field(:md5Hash)
  field(:mediaId)
  field(:objectId, as: GoogleApi.YouTubeReporting.V1.Model.GdataObjectId)
  field(:path)
  field(:referenceType)
  field(:sha1Hash)
  field(:sha256Hash)
  field(:timestamp)
  field(:token)
end

defimpl Poison.Decoder, for: GoogleApi.YouTubeReporting.V1.Model.GdataMedia do
  def decode(value, options) do
    GoogleApi.YouTubeReporting.V1.Model.GdataMedia.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.YouTubeReporting.V1.Model.GdataMedia do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
