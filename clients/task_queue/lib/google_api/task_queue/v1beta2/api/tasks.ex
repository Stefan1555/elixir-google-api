# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.TaskQueue.V1beta2.Api.Tasks do
  @moduledoc """
  API calls for all endpoints tagged `Tasks`.
  """

  alias GoogleApi.TaskQueue.V1beta2.Connection
  import GoogleApi.TaskQueue.V1beta2.RequestBuilder

  @doc """
  Delete a task from a TaskQueue.

  ## Parameters

  - connection (GoogleApi.TaskQueue.V1beta2.Connection): Connection to server
  - project (String): The project under which the queue lies.
  - taskqueue (String): The taskqueue to delete a task from.
  - task (String): The id of the task to delete.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec taskqueue_tasks_delete(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def taskqueue_tasks_delete(connection, project, taskqueue, task, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    %{}
    |> method(:delete)
    |> url("/{project}/taskqueues/{taskqueue}/tasks/{task}", %{
      "project" => URI.encode_www_form(project),
      "taskqueue" => URI.encode_www_form(taskqueue),
      "task" => URI.encode_www_form(task)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a particular task from a TaskQueue.

  ## Parameters

  - connection (GoogleApi.TaskQueue.V1beta2.Connection): Connection to server
  - project (String): The project under which the queue lies.
  - taskqueue (String): The taskqueue in which the task belongs.
  - task (String): The task to get properties of.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.

  ## Returns

  {:ok, %GoogleApi.TaskQueue.V1beta2.Model.Task{}} on success
  {:error, info} on failure
  """
  @spec taskqueue_tasks_get(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.TaskQueue.V1beta2.Model.Task.t()} | {:error, Tesla.Env.t()}
  def taskqueue_tasks_get(connection, project, taskqueue, task, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    %{}
    |> method(:get)
    |> url("/{project}/taskqueues/{taskqueue}/tasks/{task}", %{
      "project" => URI.encode_www_form(project),
      "taskqueue" => URI.encode_www_form(taskqueue),
      "task" => URI.encode_www_form(task)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.TaskQueue.V1beta2.Model.Task{})
  end

  @doc """
  Insert a new task in a TaskQueue

  ## Parameters

  - connection (GoogleApi.TaskQueue.V1beta2.Connection): Connection to server
  - project (String): The project under which the queue lies
  - taskqueue (String): The taskqueue to insert the task into
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (Task): 

  ## Returns

  {:ok, %GoogleApi.TaskQueue.V1beta2.Model.Task{}} on success
  {:error, info} on failure
  """
  @spec taskqueue_tasks_insert(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.TaskQueue.V1beta2.Model.Task.t()} | {:error, Tesla.Env.t()}
  def taskqueue_tasks_insert(connection, project, taskqueue, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/{project}/taskqueues/{taskqueue}/tasks", %{
      "project" => URI.encode_www_form(project),
      "taskqueue" => URI.encode_www_form(taskqueue)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.TaskQueue.V1beta2.Model.Task{})
  end

  @doc """
  Lease 1 or more tasks from a TaskQueue.

  ## Parameters

  - connection (GoogleApi.TaskQueue.V1beta2.Connection): Connection to server
  - project (String): The project under which the queue lies.
  - taskqueue (String): The taskqueue to lease a task from.
  - num_tasks (Integer): The number of tasks to lease.
  - lease_secs (Integer): The lease in seconds.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :group_by_tag (Boolean): When true, all returned tasks will have the same tag
    - :tag (String): The tag allowed for tasks in the response. Must only be specified if group_by_tag is true. If group_by_tag is true and tag is not specified the tag will be that of the oldest task by eta, i.e. the first available tag

  ## Returns

  {:ok, %GoogleApi.TaskQueue.V1beta2.Model.Tasks{}} on success
  {:error, info} on failure
  """
  @spec taskqueue_tasks_lease(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          Integer.t(),
          Integer.t(),
          keyword()
        ) :: {:ok, GoogleApi.TaskQueue.V1beta2.Model.Tasks.t()} | {:error, Tesla.Env.t()}
  def taskqueue_tasks_lease(connection, project, taskqueue, num_tasks, lease_secs, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :groupByTag => :query,
      :tag => :query
    }

    %{}
    |> method(:post)
    |> url("/{project}/taskqueues/{taskqueue}/tasks/lease", %{
      "project" => URI.encode_www_form(project),
      "taskqueue" => URI.encode_www_form(taskqueue)
    })
    |> add_param(:query, :numTasks, num_tasks)
    |> add_param(:query, :leaseSecs, lease_secs)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.TaskQueue.V1beta2.Model.Tasks{})
  end

  @doc """
  List Tasks in a TaskQueue

  ## Parameters

  - connection (GoogleApi.TaskQueue.V1beta2.Connection): Connection to server
  - project (String): The project under which the queue lies.
  - taskqueue (String): The id of the taskqueue to list tasks from.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.

  ## Returns

  {:ok, %GoogleApi.TaskQueue.V1beta2.Model.Tasks2{}} on success
  {:error, info} on failure
  """
  @spec taskqueue_tasks_list(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.TaskQueue.V1beta2.Model.Tasks2.t()} | {:error, Tesla.Env.t()}
  def taskqueue_tasks_list(connection, project, taskqueue, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    %{}
    |> method(:get)
    |> url("/{project}/taskqueues/{taskqueue}/tasks", %{
      "project" => URI.encode_www_form(project),
      "taskqueue" => URI.encode_www_form(taskqueue)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.TaskQueue.V1beta2.Model.Tasks2{})
  end

  @doc """
  Update tasks that are leased out of a TaskQueue. This method supports patch semantics.

  ## Parameters

  - connection (GoogleApi.TaskQueue.V1beta2.Connection): Connection to server
  - project (String): The project under which the queue lies.
  - taskqueue (String): 
  - task (String): 
  - new_lease_seconds (Integer): The new lease in seconds.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (Task): 

  ## Returns

  {:ok, %GoogleApi.TaskQueue.V1beta2.Model.Task{}} on success
  {:error, info} on failure
  """
  @spec taskqueue_tasks_patch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          Integer.t(),
          keyword()
        ) :: {:ok, GoogleApi.TaskQueue.V1beta2.Model.Task.t()} | {:error, Tesla.Env.t()}
  def taskqueue_tasks_patch(connection, project, taskqueue, task, new_lease_seconds, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/{project}/taskqueues/{taskqueue}/tasks/{task}", %{
      "project" => URI.encode_www_form(project),
      "taskqueue" => URI.encode_www_form(taskqueue),
      "task" => URI.encode_www_form(task)
    })
    |> add_param(:query, :newLeaseSeconds, new_lease_seconds)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.TaskQueue.V1beta2.Model.Task{})
  end

  @doc """
  Update tasks that are leased out of a TaskQueue.

  ## Parameters

  - connection (GoogleApi.TaskQueue.V1beta2.Connection): Connection to server
  - project (String): The project under which the queue lies.
  - taskqueue (String): 
  - task (String): 
  - new_lease_seconds (Integer): The new lease in seconds.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (Task): 

  ## Returns

  {:ok, %GoogleApi.TaskQueue.V1beta2.Model.Task{}} on success
  {:error, info} on failure
  """
  @spec taskqueue_tasks_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          Integer.t(),
          keyword()
        ) :: {:ok, GoogleApi.TaskQueue.V1beta2.Model.Task.t()} | {:error, Tesla.Env.t()}
  def taskqueue_tasks_update(connection, project, taskqueue, task, new_lease_seconds, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/{project}/taskqueues/{taskqueue}/tasks/{task}", %{
      "project" => URI.encode_www_form(project),
      "taskqueue" => URI.encode_www_form(taskqueue),
      "task" => URI.encode_www_form(task)
    })
    |> add_param(:query, :newLeaseSeconds, new_lease_seconds)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.TaskQueue.V1beta2.Model.Task{})
  end
end
