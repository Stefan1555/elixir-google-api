# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.StreetViewPublish.V1.Api.Photos do
  @moduledoc """
  API calls for all endpoints tagged `Photos`.
  """

  alias GoogleApi.StreetViewPublish.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Deletes a list of Photos and their metadata.  Note that if BatchDeletePhotos fails, either critical fields are missing or there was an authentication error. Even if BatchDeletePhotos succeeds, there may have been failures for single photos in the batch. These failures will be specified in each PhotoResponse.status in BatchDeletePhotosResponse.results. See DeletePhoto for specific failures that can occur per photo.

  ## Parameters

  - connection (GoogleApi.StreetViewPublish.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (BatchDeletePhotosRequest): 

  ## Returns

  {:ok, %GoogleApi.StreetViewPublish.V1.Model.BatchDeletePhotosResponse{}} on success
  {:error, info} on failure
  """
  @spec streetviewpublish_photos_batch_delete(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.StreetViewPublish.V1.Model.BatchDeletePhotosResponse.t()}
          | {:error, Tesla.Env.t()}
  def streetviewpublish_photos_batch_delete(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/photos:batchDelete")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.StreetViewPublish.V1.Model.BatchDeletePhotosResponse{}]
    )
  end

  @doc """
  Gets the metadata of the specified Photo batch.  Note that if BatchGetPhotos fails, either critical fields are missing or there was an authentication error. Even if BatchGetPhotos succeeds, there may have been failures for single photos in the batch. These failures will be specified in each PhotoResponse.status in BatchGetPhotosResponse.results. See GetPhoto for specific failures that can occur per photo.

  ## Parameters

  - connection (GoogleApi.StreetViewPublish.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :languageCode (String.t): The BCP-47 language code, such as \&quot;en-US\&quot; or \&quot;sr-Latn\&quot;. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user&#39;s language preference for Google services will be used.
    - :photoIds ([String.t]): Required. IDs of the Photos. For HTTP GET requests, the URL query parameter should be &#x60;photoIds&#x3D;&lt;id1&gt;&amp;photoIds&#x3D;&lt;id2&gt;&amp;...&#x60;.
    - :view (String.t): Specifies if a download URL for the photo bytes should be returned in the Photo response.

  ## Returns

  {:ok, %GoogleApi.StreetViewPublish.V1.Model.BatchGetPhotosResponse{}} on success
  {:error, info} on failure
  """
  @spec streetviewpublish_photos_batch_get(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.StreetViewPublish.V1.Model.BatchGetPhotosResponse.t()}
          | {:error, Tesla.Env.t()}
  def streetviewpublish_photos_batch_get(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :languageCode => :query,
      :photoIds => :query,
      :view => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/photos:batchGet")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.StreetViewPublish.V1.Model.BatchGetPhotosResponse{}]
    )
  end

  @doc """
  Updates the metadata of Photos, such as pose, place association, connections, etc. Changing the pixels of photos is not supported.  Note that if BatchUpdatePhotos fails, either critical fields are missing or there was an authentication error. Even if BatchUpdatePhotos succeeds, there may have been failures for single photos in the batch. These failures will be specified in each PhotoResponse.status in BatchUpdatePhotosResponse.results. See UpdatePhoto for specific failures that can occur per photo.  Only the fields specified in updateMask field are used. If &#x60;updateMask&#x60; is not present, the update applies to all fields.  The number of UpdatePhotoRequest messages in a BatchUpdatePhotosRequest must not exceed 20.  &lt;aside class&#x3D;\&quot;note\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; To update Pose.altitude, Pose.latLngPair has to be filled as well. Otherwise, the request will fail.&lt;/aside&gt;

  ## Parameters

  - connection (GoogleApi.StreetViewPublish.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (BatchUpdatePhotosRequest): 

  ## Returns

  {:ok, %GoogleApi.StreetViewPublish.V1.Model.BatchUpdatePhotosResponse{}} on success
  {:error, info} on failure
  """
  @spec streetviewpublish_photos_batch_update(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.StreetViewPublish.V1.Model.BatchUpdatePhotosResponse.t()}
          | {:error, Tesla.Env.t()}
  def streetviewpublish_photos_batch_update(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/photos:batchUpdate")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.StreetViewPublish.V1.Model.BatchUpdatePhotosResponse{}]
    )
  end

  @doc """
  Lists all the Photos that belong to the user.  &lt;aside class&#x3D;\&quot;note\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Recently created photos that are still being indexed are not returned in the response.&lt;/aside&gt;

  ## Parameters

  - connection (GoogleApi.StreetViewPublish.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :filter (String.t): The filter expression. For example: &#x60;placeId&#x3D;ChIJj61dQgK6j4AR4GeTYWZsKWw&#x60;.  The only filter supported at the moment is &#x60;placeId&#x60;.
    - :languageCode (String.t): The BCP-47 language code, such as \&quot;en-US\&quot; or \&quot;sr-Latn\&quot;. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user&#39;s language preference for Google services will be used.
    - :pageSize (integer()): The maximum number of photos to return. &#x60;pageSize&#x60; must be non-negative. If &#x60;pageSize&#x60; is zero or is not provided, the default page size of 100 will be used. The number of photos returned in the response may be less than &#x60;pageSize&#x60; if the number of photos that belong to the user is less than &#x60;pageSize&#x60;.
    - :pageToken (String.t): The nextPageToken value returned from a previous ListPhotos request, if any.
    - :view (String.t): Specifies if a download URL for the photos bytes should be returned in the Photos response.

  ## Returns

  {:ok, %GoogleApi.StreetViewPublish.V1.Model.ListPhotosResponse{}} on success
  {:error, info} on failure
  """
  @spec streetviewpublish_photos_list(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.StreetViewPublish.V1.Model.ListPhotosResponse.t()}
          | {:error, Tesla.Env.t()}
  def streetviewpublish_photos_list(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :filter => :query,
      :languageCode => :query,
      :pageSize => :query,
      :pageToken => :query,
      :view => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/photos")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.StreetViewPublish.V1.Model.ListPhotosResponse{}]
    )
  end
end
