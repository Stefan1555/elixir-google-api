# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CivicInfo.V2.Model.VoterInfoResponse do
  @moduledoc """
  The result of a voter info lookup query.

  ## Attributes

  - contests ([Contest]): Contests that will appear on the voter&#39;s ballot. Defaults to: `null`.
  - dropOffLocations ([PollingLocation]): Locations where a voter is eligible to drop off a completed ballot. The voter must have received and completed a ballot prior to arriving at the location. The location may not have ballots available on the premises. These locations could be open on or before election day as indicated in the pollingHours field. Defaults to: `null`.
  - earlyVoteSites ([PollingLocation]): Locations where the voter is eligible to vote early, prior to election day. Defaults to: `null`.
  - election (Election): The election that was queried. Defaults to: `null`.
  - kind (String.t): Identifies what kind of resource this is. Value: the fixed string \&quot;civicinfo#voterInfoResponse\&quot;. Defaults to: `null`.
  - mailOnly (boolean()): Specifies whether voters in the precinct vote only by mailing their ballots (with the possible option of dropping off their ballots as well). Defaults to: `null`.
  - normalizedInput (SimpleAddressType): The normalized version of the requested address Defaults to: `null`.
  - otherElections ([Election]): When there are multiple elections for a voter address, the otherElections field is populated in the API response and there are two possibilities: 1. If the earliest election is not the intended election, specify the election ID of the desired election in a second API request using the electionId field. 2. If these elections occur on the same day, the API doesn?t return any polling location, contest, or election official information to ensure that an additional query is made. For user-facing applications, we recommend displaying these elections to the user to disambiguate. A second API request using the electionId field should be made for the election that is relevant to the user. Defaults to: `null`.
  - pollingLocations ([PollingLocation]): Locations where the voter is eligible to vote on election day. Defaults to: `null`.
  - precinctId (String.t):  Defaults to: `null`.
  - segments ([StreetSegment]):  Defaults to: `null`.
  - state ([AdministrationRegion]): Local Election Information for the state that the voter votes in. For the US, there will only be one element in this array. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :contests => list(GoogleApi.CivicInfo.V2.Model.Contest.t()),
          :dropOffLocations => list(GoogleApi.CivicInfo.V2.Model.PollingLocation.t()),
          :earlyVoteSites => list(GoogleApi.CivicInfo.V2.Model.PollingLocation.t()),
          :election => GoogleApi.CivicInfo.V2.Model.Election.t(),
          :kind => any(),
          :mailOnly => any(),
          :normalizedInput => GoogleApi.CivicInfo.V2.Model.SimpleAddressType.t(),
          :otherElections => list(GoogleApi.CivicInfo.V2.Model.Election.t()),
          :pollingLocations => list(GoogleApi.CivicInfo.V2.Model.PollingLocation.t()),
          :precinctId => any(),
          :segments => list(GoogleApi.CivicInfo.V2.Model.StreetSegment.t()),
          :state => list(GoogleApi.CivicInfo.V2.Model.AdministrationRegion.t())
        }

  field(:contests, as: GoogleApi.CivicInfo.V2.Model.Contest, type: :list)
  field(:dropOffLocations, as: GoogleApi.CivicInfo.V2.Model.PollingLocation, type: :list)
  field(:earlyVoteSites, as: GoogleApi.CivicInfo.V2.Model.PollingLocation, type: :list)
  field(:election, as: GoogleApi.CivicInfo.V2.Model.Election)
  field(:kind)
  field(:mailOnly)
  field(:normalizedInput, as: GoogleApi.CivicInfo.V2.Model.SimpleAddressType)
  field(:otherElections, as: GoogleApi.CivicInfo.V2.Model.Election, type: :list)
  field(:pollingLocations, as: GoogleApi.CivicInfo.V2.Model.PollingLocation, type: :list)
  field(:precinctId)
  field(:segments, as: GoogleApi.CivicInfo.V2.Model.StreetSegment, type: :list)
  field(:state, as: GoogleApi.CivicInfo.V2.Model.AdministrationRegion, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.CivicInfo.V2.Model.VoterInfoResponse do
  def decode(value, options) do
    GoogleApi.CivicInfo.V2.Model.VoterInfoResponse.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CivicInfo.V2.Model.VoterInfoResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
