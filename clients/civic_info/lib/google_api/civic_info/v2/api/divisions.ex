# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CivicInfo.V2.Api.Divisions do
  @moduledoc """
  API calls for all endpoints tagged `Divisions`.
  """

  alias GoogleApi.CivicInfo.V2.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Searches for political divisions by their natural name or OCD ID.

  ## Parameters

  - connection (GoogleApi.CivicInfo.V2.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :query (String.t): The search query. Queries can cover any parts of a OCD ID or a human readable division name. All words given in the query are treated as required patterns. In addition to that, most query operators of the Apache Lucene library are supported. See http://lucene.apache.org/core/2_9_4/queryparsersyntax.html
    - :body (DivisionSearchRequest): 

  ## Returns

  {:ok, %GoogleApi.CivicInfo.V2.Model.DivisionSearchResponse{}} on success
  {:error, info} on failure
  """
  @spec civicinfo_divisions_search(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.CivicInfo.V2.Model.DivisionSearchResponse.t()} | {:error, Tesla.Env.t()}
  def civicinfo_divisions_search(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :query => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/divisions")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CivicInfo.V2.Model.DivisionSearchResponse{}])
  end
end
