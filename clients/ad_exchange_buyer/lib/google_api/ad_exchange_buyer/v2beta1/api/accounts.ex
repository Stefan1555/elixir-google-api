# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.AdExchangeBuyer.V2beta1.Api.Accounts do
  @moduledoc """
  API calls for all endpoints tagged `Accounts`.
  """

  alias GoogleApi.AdExchangeBuyer.V2beta1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Creates a new client buyer.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to create a client for. (required)
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (Client): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Client.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_create(
        connection,
        account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/clients", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{}])
  end

  @doc """
  Gets a client buyer with a given client account ID.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer to retrieve. (required)
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Client.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_get(
        connection,
        account_id,
        client_account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{}])
  end

  @doc """
  Creates and sends out an email invitation to access an Ad Exchange client buyer account.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer that the user should be associated with. (required)
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (ClientUserInvitation): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_invitations_create(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_invitations_create(
        connection,
        account_id,
        client_account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation{}]
    )
  end

  @doc """
  Retrieves an existing client user invitation.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer that the user invitation to be retrieved is associated with. (required)
  - invitation_id (String.t): Numerical identifier of the user invitation to retrieve. (required)
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_invitations_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_invitations_get(
        connection,
        account_id,
        client_account_id,
        invitation_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}",
        %{
          "accountId" => URI.encode_www_form(account_id),
          "clientAccountId" => URI.encode_www_form(client_account_id),
          "invitationId" => URI.encode_www_form(invitation_id)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation{}]
    )
  end

  @doc """
  Lists all the client users invitations for a client with a given account ID.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer to list invitations for. (required) You must either specify a string representation of a numerical account identifier or the &#x60;-&#x60; character to list all the invitations for all the clients of a given sponsor buyer.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Requested page size. Server may return fewer clients than requested. If unspecified, server will pick an appropriate default.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListClientUserInvitationsResponse.nextPageToken returned from the previous call to the clients.invitations.list method.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUserInvitationsResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_invitations_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUserInvitationsResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_invitations_list(
        connection,
        account_id,
        client_account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUserInvitationsResponse{}]
    )
  end

  @doc """
  Lists all the clients for the current sponsor buyer.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Unique numerical account ID of the sponsor buyer to list the clients for.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListClientsResponse.nextPageToken returned from the previous call to the accounts.clients.list method.
    - :partnerClientId (String.t): Optional unique identifier (from the standpoint of an Ad Exchange sponsor buyer partner) of the client to return. If specified, at most one client will be returned in the response.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientsResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientsResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_list(
        connection,
        account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query,
      :partnerClientId => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientsResponse{}]
    )
  end

  @doc """
  Updates an existing client buyer.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to update a client for. (required)
  - client_account_id (String.t): Unique numerical account ID of the client to update. (required)
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (Client): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Client.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_update(
        connection,
        account_id,
        client_account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{}])
  end

  @doc """
  Retrieves an existing client user.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)
  - user_id (String.t): Numerical identifier of the user to retrieve. (required)
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_users_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_users_get(
        connection,
        account_id,
        client_account_id,
        user_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id),
        "userId" => URI.encode_www_form(user_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser{}])
  end

  @doc """
  Lists all the known client users for a specified sponsor buyer account ID.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the sponsor buyer of the client to list users for. (required)
  - client_account_id (String.t): The account ID of the client buyer to list users for. (required) You must specify either a string representation of a numerical account identifier or the &#x60;-&#x60; character to list all the client users for all the clients of a given sponsor buyer.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListClientUsersResponse.nextPageToken returned from the previous call to the accounts.clients.users.list method.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUsersResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_users_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUsersResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_users_list(
        connection,
        account_id,
        client_account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUsersResponse{}]
    )
  end

  @doc """
  Updates an existing client user. Only the user status can be changed on update.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)
  - user_id (String.t): Numerical identifier of the user to retrieve. (required)
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (ClientUser): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_users_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_users_update(
        connection,
        account_id,
        client_account_id,
        user_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id),
        "userId" => URI.encode_www_form(user_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser{}])
  end

  @doc """
  Creates a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account that this creative belongs to. Can be used to filter the response of the creatives.list method.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :duplicateIdMode (String.t): Indicates if multiple creatives can share an ID or not. Default is NO_DUPLICATES (one ID per creative).
    - :body (Creative): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_create(
        connection,
        account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :duplicateIdMode => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{}])
  end

  @doc """
  Associate an existing deal with a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account the creative belongs to.
  - creative_id (String.t): The ID of the creative associated with the deal.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (AddDealAssociationRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_deal_associations_add(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_deal_associations_add(
        connection,
        account_id,
        creative_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add",
        %{
          "accountId" => URI.encode_www_form(account_id),
          "creativeId" => URI.encode_www_form(creative_id)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}])
  end

  @doc """
  List all creative-deal associations.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account to list the associations from. Specify \&quot;-\&quot; to list all creatives the current user has access to.
  - creative_id (String.t): The creative ID to list the associations from. Specify \&quot;-\&quot; to list all creatives under the above account.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Requested page size. Server may return fewer associations than requested. If unspecified, server will pick an appropriate default.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListDealAssociationsResponse.next_page_token returned from the previous call to &#39;ListDealAssociations&#39; method.
    - :query (String.t): An optional query string to filter deal associations. If no filter is specified, all associations will be returned. Supported queries are: &lt;ul&gt; &lt;li&gt;accountId&#x3D;&lt;i&gt;account_id_string&lt;/i&gt; &lt;li&gt;creativeId&#x3D;&lt;i&gt;creative_id_string&lt;/i&gt; &lt;li&gt;dealsId&#x3D;&lt;i&gt;deals_id_string&lt;/i&gt; &lt;li&gt;dealsStatus:{approved, conditionally_approved, disapproved,                   not_checked} &lt;li&gt;openAuctionStatus:{approved, conditionally_approved, disapproved,                          not_checked} &lt;/ul&gt; Example: &#39;dealsId&#x3D;12345 AND dealsStatus:disapproved&#39;

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListDealAssociationsResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_deal_associations_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListDealAssociationsResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_deal_associations_list(
        connection,
        account_id,
        creative_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query,
      :query => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListDealAssociationsResponse{}]
    )
  end

  @doc """
  Remove the association between a deal and a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account the creative belongs to.
  - creative_id (String.t): The ID of the creative associated with the deal.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (RemoveDealAssociationRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_deal_associations_remove(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_deal_associations_remove(
        connection,
        account_id,
        creative_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove",
        %{
          "accountId" => URI.encode_www_form(account_id),
          "creativeId" => URI.encode_www_form(creative_id)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}])
  end

  @doc """
  Gets a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account the creative belongs to.
  - creative_id (String.t): The ID of the creative to retrieve.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_get(
        connection,
        account_id,
        creative_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{}])
  end

  @doc """
  Lists creatives.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account to list the creatives from. Specify \&quot;-\&quot; to list all creatives the current user has access to.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available via another call. If unspecified, server will pick an appropriate default. Acceptable values are 1 to 1000, inclusive.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.next_page_token returned from the previous call to &#39;ListCreatives&#39; method.
    - :query (String.t): An optional query string to filter creatives. If no filter is specified, all active creatives will be returned. &lt;p&gt;Supported queries are: &lt;ul&gt; &lt;li&gt;accountId&#x3D;&lt;i&gt;account_id_string&lt;/i&gt; &lt;li&gt;creativeId&#x3D;&lt;i&gt;creative_id_string&lt;/i&gt; &lt;li&gt;dealsStatus: {approved, conditionally_approved, disapproved,                    not_checked} &lt;li&gt;openAuctionStatus: {approved, conditionally_approved, disapproved,                           not_checked} &lt;li&gt;attribute: {a numeric attribute from the list of attributes} &lt;li&gt;disapprovalReason: {a reason from DisapprovalReason} &lt;/ul&gt; Example: &#39;accountId&#x3D;12345 AND (dealsStatus:disapproved AND disapprovalReason:unacceptable_content) OR attribute:47&#39;

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListCreativesResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListCreativesResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_list(
        connection,
        account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query,
      :query => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListCreativesResponse{}]
    )
  end

  @doc """
  Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account of the creative to stop notifications for.
  - creative_id (String.t): The creative ID of the creative to stop notifications for. Specify \&quot;-\&quot; to specify stopping account level notifications.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (StopWatchingCreativeRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_stop_watching(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_stop_watching(
        connection,
        account_id,
        creative_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}])
  end

  @doc """
  Updates a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account that this creative belongs to. Can be used to filter the response of the creatives.list method.
  - creative_id (String.t): The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (Creative): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_update(
        connection,
        account_id,
        creative_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{}])
  end

  @doc """
  Watches a creative. Will result in push notifications being sent to the topic when the creative changes status.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account of the creative to watch.
  - creative_id (String.t): The creative ID to watch for status changes. Specify \&quot;-\&quot; to watch all creatives under the above account. If both creative-level and account-level notifications are sent, only a single notification will be sent to the creative-level notification topic.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (WatchCreativeRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_watch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_watch(
        connection,
        account_id,
        creative_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}])
  end

  @doc """
  List finalized proposals, regardless if a proposal is being renegotiated. A filter expression (PQL query) may be specified to filter the results. The notes will not be returned.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :filter (String.t): An optional PQL filter query used to query for proposals.  Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered.
    - :filterSyntax (String.t): Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER.
    - :pageSize (integer()): Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
    - :pageToken (String.t): The page token as returned from ListProposalsResponse.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListProposalsResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_finalized_proposals_list(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListProposalsResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_finalized_proposals_list(
        connection,
        account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :filter => :query,
      :filterSyntax => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/finalizedProposals", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListProposalsResponse{}]
    )
  end

  @doc """
  Gets the requested product by ID.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - product_id (String.t): The ID for the product to get the head revision for.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Product{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_products_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Product.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_products_get(
        connection,
        account_id,
        product_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/products/{productId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "productId" => URI.encode_www_form(product_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Product{}])
  end

  @doc """
  List all products visible to the buyer (optionally filtered by the specified PQL query).

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :filter (String.t): An optional PQL query used to query for products. See https://developers.google.com/ad-manager/docs/pqlreference for documentation about PQL and examples.  Nested repeated fields, such as product.targetingCriterion.inclusions, cannot be filtered.
    - :pageSize (integer()): Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
    - :pageToken (String.t): The page token as returned from ListProductsResponse.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListProductsResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_products_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListProductsResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_products_list(
        connection,
        account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :filter => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/products", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListProductsResponse{}]
    )
  end

  @doc """
  Mark the proposal as accepted at the given revision number. If the number does not match the server&#39;s revision number an &#x60;ABORTED&#x60; error message will be returned. This call updates the proposal_state from &#x60;PROPOSED&#x60; to &#x60;BUYER_ACCEPTED&#x60;, or from &#x60;SELLER_ACCEPTED&#x60; to &#x60;FINALIZED&#x60;.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - proposal_id (String.t): The ID of the proposal to accept.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (AcceptProposalRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_accept(
        connection,
        account_id,
        proposal_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals/{proposalId}:accept", %{
        "accountId" => URI.encode_www_form(account_id),
        "proposalId" => URI.encode_www_form(proposal_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}])
  end

  @doc """
  Create a new note and attach it to the proposal. The note is assigned a unique ID by the server. The proposal revision number will not increase when associated with a new note.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - proposal_id (String.t): The ID of the proposal to attach the note to.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (AddNoteRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Note{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_add_note(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Note.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_add_note(
        connection,
        account_id,
        proposal_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote", %{
        "accountId" => URI.encode_www_form(account_id),
        "proposalId" => URI.encode_www_form(proposal_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Note{}])
  end

  @doc """
  Cancel an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized, but only cancels a negotiation unilaterally.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - proposal_id (String.t): The ID of the proposal to cancel negotiation for.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (CancelNegotiationRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_cancel_negotiation(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_cancel_negotiation(
        connection,
        account_id,
        proposal_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation", %{
        "accountId" => URI.encode_www_form(account_id),
        "proposalId" => URI.encode_www_form(proposal_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}])
  end

  @doc """
  Update the given proposal to indicate that setup has been completed. This method is called by the buyer when the line items have been created on their end for a finalized proposal and all the required creatives have been uploaded using the creatives API. This call updates the &#x60;is_setup_completed&#x60; bit on the proposal and also notifies the seller. The server will advance the revision number of the most recent proposal.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - proposal_id (String.t): The ID of the proposal to mark as setup completed.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (CompleteSetupRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_complete_setup(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_complete_setup(
        connection,
        account_id,
        proposal_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup", %{
        "accountId" => URI.encode_www_form(account_id),
        "proposalId" => URI.encode_www_form(proposal_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}])
  end

  @doc """
  Create the given proposal. Each created proposal and any deals it contains are assigned a unique ID by the server.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (Proposal): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_create(
        connection,
        account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}])
  end

  @doc """
  Gets a proposal given its ID. The proposal is returned at its head revision.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - proposal_id (String.t): The unique ID of the proposal
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_get(
        connection,
        account_id,
        proposal_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals/{proposalId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "proposalId" => URI.encode_www_form(proposal_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}])
  end

  @doc """
  List proposals. A filter expression (PQL query) may be specified to filter the results. To retrieve all finalized proposals, regardless if a proposal is being renegotiated, see the FinalizedProposals resource. Note that Bidder/ChildSeat relationships differ from the usual behavior. A Bidder account can only see its child seats&#39; proposals by specifying the ChildSeat&#39;s accountId in the request path.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :filter (String.t): An optional PQL filter query used to query for proposals.  Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered.
    - :filterSyntax (String.t): Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER.
    - :pageSize (integer()): Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
    - :pageToken (String.t): The page token as returned from ListProposalsResponse.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListProposalsResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListProposalsResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_list(
        connection,
        account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :filter => :query,
      :filterSyntax => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListProposalsResponse{}]
    )
  end

  @doc """
  Update the given proposal to pause serving. This method will set the &#x60;DealServingMetadata.DealPauseStatus.has_buyer_paused&#x60; bit to true for all deals in the proposal.  It is a no-op to pause an already-paused proposal. It is an error to call PauseProposal for a proposal that is not finalized or renegotiating.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - proposal_id (String.t): The ID of the proposal to pause.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (PauseProposalRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_pause(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_pause(
        connection,
        account_id,
        proposal_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals/{proposalId}:pause", %{
        "accountId" => URI.encode_www_form(account_id),
        "proposalId" => URI.encode_www_form(proposal_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}])
  end

  @doc """
  Update the given proposal to resume serving. This method will set the &#x60;DealServingMetadata.DealPauseStatus.has_buyer_paused&#x60; bit to false for all deals in the proposal.  Note that if the &#x60;has_seller_paused&#x60; bit is also set, serving will not resume until the seller also resumes.  It is a no-op to resume an already-running proposal. It is an error to call ResumeProposal for a proposal that is not finalized or renegotiating.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - proposal_id (String.t): The ID of the proposal to resume.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (ResumeProposalRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_resume(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_resume(
        connection,
        account_id,
        proposal_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals/{proposalId}:resume", %{
        "accountId" => URI.encode_www_form(account_id),
        "proposalId" => URI.encode_www_form(proposal_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}])
  end

  @doc """
  Update the given proposal at the client known revision number. If the server revision has advanced since the passed-in &#x60;proposal.proposal_revision&#x60;, an &#x60;ABORTED&#x60; error message will be returned. Only the buyer-modifiable fields of the proposal will be updated.  Note that the deals in the proposal will be updated to match the passed-in copy. If a passed-in deal does not have a &#x60;deal_id&#x60;, the server will assign a new unique ID and create the deal. If passed-in deal has a &#x60;deal_id&#x60;, it will be updated to match the passed-in copy. Any existing deals not present in the passed-in proposal will be deleted. It is an error to pass in a deal with a &#x60;deal_id&#x60; not present at head.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - proposal_id (String.t): The unique ID of the proposal.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (Proposal): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_proposals_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_proposals_update(
        connection,
        account_id,
        proposal_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url("/v2beta1/accounts/{accountId}/proposals/{proposalId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "proposalId" => URI.encode_www_form(proposal_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Proposal{}])
  end

  @doc """
  Gets the requested publisher profile by id.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - publisher_profile_id (String.t): The id for the publisher profile to get.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.PublisherProfile{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_publisher_profiles_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.PublisherProfile.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_publisher_profiles_get(
        connection,
        account_id,
        publisher_profile_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "publisherProfileId" => URI.encode_www_form(publisher_profile_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.PublisherProfile{}]
    )
  end

  @doc """
  List all publisher profiles visible to the buyer

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Account ID of the buyer.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): Specify the number of results to include per page.
    - :pageToken (String.t): The page token as return from ListPublisherProfilesResponse.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListPublisherProfilesResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_publisher_profiles_list(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListPublisherProfilesResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_publisher_profiles_list(
        connection,
        account_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/publisherProfiles", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListPublisherProfilesResponse{}]
    )
  end
end
