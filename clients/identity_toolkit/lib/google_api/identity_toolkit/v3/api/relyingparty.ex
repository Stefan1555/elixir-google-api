# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.IdentityToolkit.V3.Api.Relyingparty do
  @moduledoc """
  API calls for all endpoints tagged `Relyingparty`.
  """

  alias GoogleApi.IdentityToolkit.V3.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Creates the URI used by the IdP to authenticate the user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyCreateAuthUriRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.CreateAuthUriResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_create_auth_uri(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.CreateAuthUriResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_create_auth_uri(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/createAuthUri")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.CreateAuthUriResponse{}]
    )
  end

  @doc """
  Delete user account.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyDeleteAccountRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.DeleteAccountResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_delete_account(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.DeleteAccountResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_delete_account(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/deleteAccount")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.DeleteAccountResponse{}]
    )
  end

  @doc """
  Batch download user accounts.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyDownloadAccountRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.DownloadAccountResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_download_account(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.DownloadAccountResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_download_account(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/downloadAccount")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.DownloadAccountResponse{}]
    )
  end

  @doc """
  Reset password for a user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyEmailLinkSigninRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.EmailLinkSigninResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_email_link_signin(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.EmailLinkSigninResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_email_link_signin(
        connection,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/emailLinkSignin")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.EmailLinkSigninResponse{}]
    )
  end

  @doc """
  Returns the account info.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyGetAccountInfoRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.GetAccountInfoResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_account_info(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.GetAccountInfoResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_get_account_info(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/getAccountInfo")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.GetAccountInfoResponse{}]
    )
  end

  @doc """
  Get a code for user action confirmation.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (Relyingparty): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.GetOobConfirmationCodeResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_oob_confirmation_code(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.GetOobConfirmationCodeResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_get_oob_confirmation_code(
        connection,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/getOobConfirmationCode")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.GetOobConfirmationCodeResponse{}]
    )
  end

  @doc """
  Get project configuration.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :delegatedProjectNumber (String.t): Delegated GCP project number of the request.
    - :projectNumber (String.t): GCP project number of the request.

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_project_config(Tesla.Env.client(), keyword()) ::
          {:ok,
           GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_get_project_config(
        connection,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :delegatedProjectNumber => :query,
      :projectNumber => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/getProjectConfig")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [
          struct:
            %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse{}
        ]
    )
  end

  @doc """
  Get token signing public key.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetPublicKeysResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_public_keys(Tesla.Env.client(), keyword()) ::
          {:ok,
           GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetPublicKeysResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_get_public_keys(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/publicKeys")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [
          struct:
            %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetPublicKeysResponse{}
        ]
    )
  end

  @doc """
  Get recaptcha secure param.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.GetRecaptchaParamResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_recaptcha_param(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.GetRecaptchaParamResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_get_recaptcha_param(
        connection,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/getRecaptchaParam")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.GetRecaptchaParamResponse{}]
    )
  end

  @doc """
  Reset password for a user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyResetPasswordRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.ResetPasswordResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_reset_password(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.ResetPasswordResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_reset_password(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/resetPassword")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.ResetPasswordResponse{}]
    )
  end

  @doc """
  Send SMS verification code.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartySendVerificationCodeRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySendVerificationCodeResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_send_verification_code(Tesla.Env.client(), keyword()) ::
          {:ok,
           GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySendVerificationCodeResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_send_verification_code(
        connection,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/sendVerificationCode")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [
          struct:
            %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySendVerificationCodeResponse{}
        ]
    )
  end

  @doc """
  Set account info for a user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartySetAccountInfoRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.SetAccountInfoResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_set_account_info(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.SetAccountInfoResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_set_account_info(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/setAccountInfo")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.SetAccountInfoResponse{}]
    )
  end

  @doc """
  Set project configuration.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartySetProjectConfigRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySetProjectConfigResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_set_project_config(Tesla.Env.client(), keyword()) ::
          {:ok,
           GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySetProjectConfigResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_set_project_config(
        connection,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/setProjectConfig")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [
          struct:
            %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySetProjectConfigResponse{}
        ]
    )
  end

  @doc """
  Sign out user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartySignOutUserRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySignOutUserResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_sign_out_user(Tesla.Env.client(), keyword()) ::
          {:ok,
           GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySignOutUserResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_sign_out_user(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/signOutUser")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [
          struct:
            %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySignOutUserResponse{}
        ]
    )
  end

  @doc """
  Signup new user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartySignupNewUserRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.SignupNewUserResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_signup_new_user(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.SignupNewUserResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_signup_new_user(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/signupNewUser")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.SignupNewUserResponse{}]
    )
  end

  @doc """
  Batch upload existing user accounts.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyUploadAccountRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.UploadAccountResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_upload_account(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.UploadAccountResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_upload_account(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/uploadAccount")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.UploadAccountResponse{}]
    )
  end

  @doc """
  Verifies the assertion returned by the IdP.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyVerifyAssertionRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_verify_assertion(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_verify_assertion(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/verifyAssertion")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse{}]
    )
  end

  @doc """
  Verifies the developer asserted ID token.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyVerifyCustomTokenRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.VerifyCustomTokenResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_verify_custom_token(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.VerifyCustomTokenResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_verify_custom_token(
        connection,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/verifyCustomToken")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.VerifyCustomTokenResponse{}]
    )
  end

  @doc """
  Verifies the user entered password.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyVerifyPasswordRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.VerifyPasswordResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_verify_password(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.IdentityToolkit.V3.Model.VerifyPasswordResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_verify_password(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/verifyPassword")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.IdentityToolkit.V3.Model.VerifyPasswordResponse{}]
    )
  end

  @doc """
  Verifies ownership of a phone number and creates/updates the user account accordingly.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_verify_phone_number(Tesla.Env.client(), keyword()) ::
          {:ok,
           GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.t()}
          | {:error, Tesla.Env.t()}
  def identitytoolkit_relyingparty_verify_phone_number(
        connection,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/verifyPhoneNumber")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [
          struct:
            %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse{}
        ]
    )
  end
end
