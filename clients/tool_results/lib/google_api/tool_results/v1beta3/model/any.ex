# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.ToolResults.V1beta3.Model.Any do
  @moduledoc """
  &#x60;Any&#x60; contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.  Foo foo &#x3D; ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&amp;foo)) { ... }  Example 2: Pack and unpack a message in Java.  Foo foo &#x3D; ...; Any any &#x3D; Any.pack(foo); ... if (any.is(Foo.class)) { foo &#x3D; any.unpack(Foo.class); }  Example 3: Pack and unpack a message in Python.  foo &#x3D; Foo(...) any &#x3D; Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ...  Example 4: Pack and unpack a message in Go  foo :&#x3D; &amp;pb.Foo{...} any, err :&#x3D; ptypes.MarshalAny(foo) ... foo :&#x3D; &amp;pb.Foo{} if err :&#x3D; ptypes.UnmarshalAny(any, foo); err !&#x3D; nil { ... }  The pack methods provided by protobuf library will by default use &#39;type.googleapis.com/full.type.name&#39; as the type URL and the unpack methods only use the fully qualified type name after the last &#39;/&#39; in the type URL, for example \&quot;foo.bar.com/x/y.z\&quot; will yield type name \&quot;y.z\&quot;.    JSON &#x3D;&#x3D;&#x3D;&#x3D; The JSON representation of an &#x60;Any&#x60; value uses the regular representation of the deserialized, embedded message, with an additional field &#x60;@type&#x60; which contains the type URL. Example:  package google.profile; message Person { string first_name &#x3D; 1; string last_name &#x3D; 2; }  { \&quot;@type\&quot;: \&quot;type.googleapis.com/google.profile.Person\&quot;, \&quot;firstName\&quot;: , \&quot;lastName\&quot;:  }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field &#x60;value&#x60; which holds the custom JSON in addition to the &#x60;@type&#x60; field. Example (for message [google.protobuf.Duration][]):  { \&quot;@type\&quot;: \&quot;type.googleapis.com/google.protobuf.Duration\&quot;, \&quot;value\&quot;: \&quot;1.212s\&quot; }

  ## Attributes

  - typeUrl (String.t): A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \&quot;/\&quot; character. The last segment of the URL&#39;s path must represent the fully qualified name of the type (as in &#x60;path/google.protobuf.Duration&#x60;). The name should be in a canonical form (e.g., leading \&quot;.\&quot; is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme &#x60;http&#x60;, &#x60;https&#x60;, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, &#x60;https&#x60; is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than &#x60;http&#x60;, &#x60;https&#x60; (or the empty scheme) might be used with implementation specific semantics. Defaults to: `null`.
  - value (binary()): Must be a valid serialized protocol buffer of the above specified type. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :typeUrl => any(),
          :value => any()
        }

  field(:typeUrl)
  field(:value)
end

defimpl Poison.Decoder, for: GoogleApi.ToolResults.V1beta3.Model.Any do
  def decode(value, options) do
    GoogleApi.ToolResults.V1beta3.Model.Any.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ToolResults.V1beta3.Model.Any do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
