# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.People.V1.Api.People do
  @moduledoc """
  API calls for all endpoints tagged `People`.
  """

  alias GoogleApi.People.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Provides a list of the authenticated user&#39;s contacts merged with any connected profiles. &lt;br&gt; The request throws a 400 error if &#39;personFields&#39; is not specified.

  ## Parameters

  - connection (GoogleApi.People.V1.Connection): Connection to server
  - people_id (String.t): Part of &#x60;resourceName&#x60;. The resource name to return connections for. Only &#x60;people/me&#x60; is valid.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :pageSize (integer()): The number of connections to include in the response. Valid values are between 1 and 2000, inclusive. Defaults to 100.
    - :pageToken (String.t): The token of the page to be returned.
    - :personFields (String.t): **Required.** A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are:  * addresses * ageRanges * biographies * birthdays * braggingRights * coverPhotos * emailAddresses * events * genders * imClients * interests * locales * memberships * metadata * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * relationshipInterests * relationshipStatuses * residences * sipAddresses * skills * taglines * urls * userDefined
    - :requestMask.includeField (String.t): **Required.** Comma-separated list of person fields to be included in the response. Each path should start with &#x60;person.&#x60;: for example, &#x60;person.names&#x60; or &#x60;person.photos&#x60;.
    - :requestSyncToken (boolean()): Whether the response should include a sync token, which can be used to get all changes since the last request. For subsequent sync requests use the &#x60;sync_token&#x60; param instead. Initial sync requests that specify &#x60;request_sync_token&#x60; have an additional rate limit.
    - :sortOrder (String.t): The order in which the connections should be sorted. Defaults to &#x60;LAST_MODIFIED_ASCENDING&#x60;.
    - :syncToken (String.t): A sync token returned by a previous call to &#x60;people.connections.list&#x60;. Only resources changed since the sync token was created will be returned. Sync requests that specify &#x60;sync_token&#x60; have an additional rate limit.

  ## Returns

  {:ok, %GoogleApi.People.V1.Model.ListConnectionsResponse{}} on success
  {:error, info} on failure
  """
  @spec people_people_connections_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.People.V1.Model.ListConnectionsResponse.t()} | {:error, Tesla.Env.t()}
  def people_people_connections_list(connection, people_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :pageSize => :query,
      :pageToken => :query,
      :personFields => :query,
      :"requestMask.includeField" => :query,
      :requestSyncToken => :query,
      :sortOrder => :query,
      :syncToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/people/{peopleId}/connections", %{
        "peopleId" => URI.encode_www_form(people_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.People.V1.Model.ListConnectionsResponse{}])
  end

  @doc """
  Create a new contact and return the person resource for that contact.

  ## Parameters

  - connection (GoogleApi.People.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :parent (String.t): The resource name of the owning person resource.
    - :body (Person): 

  ## Returns

  {:ok, %GoogleApi.People.V1.Model.Person{}} on success
  {:error, info} on failure
  """
  @spec people_people_create_contact(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.People.V1.Model.Person.t()} | {:error, Tesla.Env.t()}
  def people_people_create_contact(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :parent => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/people:createContact")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.People.V1.Model.Person{}])
  end

  @doc """
  Delete a contact person. Any non-contact data will not be deleted.

  ## Parameters

  - connection (GoogleApi.People.V1.Connection): Connection to server
  - people_id (String.t): Part of &#x60;resourceName&#x60;. The resource name of the contact to delete.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).

  ## Returns

  {:ok, %GoogleApi.People.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec people_people_delete_contact(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.People.V1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def people_people_delete_contact(connection, people_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1/people/{peopleId}:deleteContact", %{
        "peopleId" => URI.encode_www_form(people_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.People.V1.Model.Empty{}])
  end

  @doc """
  Provides information about a person by specifying a resource name. Use &#x60;people/me&#x60; to indicate the authenticated user. &lt;br&gt; The request throws a 400 error if &#39;personFields&#39; is not specified.

  ## Parameters

  - connection (GoogleApi.People.V1.Connection): Connection to server
  - people_id (String.t): Part of &#x60;resourceName&#x60;. The resource name of the person to provide information about.  - To get information about the authenticated user, specify &#x60;people/me&#x60;. - To get information about a google account, specify  &#x60;people/&#x60;&lt;var&gt;account_id&lt;/var&gt;. - To get information about a contact, specify the resource name that   identifies the contact as returned by [&#x60;people.connections.list&#x60;](/people/api/rest/v1/people.connections/list).
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :personFields (String.t): **Required.** A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Valid values are:  * addresses * ageRanges * biographies * birthdays * braggingRights * coverPhotos * emailAddresses * events * genders * imClients * interests * locales * memberships * metadata * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * relationshipInterests * relationshipStatuses * residences * sipAddresses * skills * taglines * urls * userDefined
    - :requestMask.includeField (String.t): **Required.** Comma-separated list of person fields to be included in the response. Each path should start with &#x60;person.&#x60;: for example, &#x60;person.names&#x60; or &#x60;person.photos&#x60;.

  ## Returns

  {:ok, %GoogleApi.People.V1.Model.Person{}} on success
  {:error, info} on failure
  """
  @spec people_people_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.People.V1.Model.Person.t()} | {:error, Tesla.Env.t()}
  def people_people_get(connection, people_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :personFields => :query,
      :"requestMask.includeField" => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/people/{peopleId}", %{
        "peopleId" => URI.encode_www_form(people_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.People.V1.Model.Person{}])
  end

  @doc """
  Provides information about a list of specific people by specifying a list of requested resource names. Use &#x60;people/me&#x60; to indicate the authenticated user. &lt;br&gt; The request throws a 400 error if &#39;personFields&#39; is not specified.

  ## Parameters

  - connection (GoogleApi.People.V1.Connection): Connection to server
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :personFields (String.t): **Required.** A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are:  * addresses * ageRanges * biographies * birthdays * braggingRights * coverPhotos * emailAddresses * events * genders * imClients * interests * locales * memberships * metadata * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * relationshipInterests * relationshipStatuses * residences * sipAddresses * skills * taglines * urls * userDefined
    - :requestMask.includeField (String.t): **Required.** Comma-separated list of person fields to be included in the response. Each path should start with &#x60;person.&#x60;: for example, &#x60;person.names&#x60; or &#x60;person.photos&#x60;.
    - :resourceNames ([String.t]): The resource names of the people to provide information about.  - To get information about the authenticated user, specify &#x60;people/me&#x60;. - To get information about a google account, specify   &#x60;people/&#x60;&lt;var&gt;account_id&lt;/var&gt;. - To get information about a contact, specify the resource name that   identifies the contact as returned by [&#x60;people.connections.list&#x60;](/people/api/rest/v1/people.connections/list).  You can include up to 50 resource names in one request.

  ## Returns

  {:ok, %GoogleApi.People.V1.Model.GetPeopleResponse{}} on success
  {:error, info} on failure
  """
  @spec people_people_get_batch_get(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.People.V1.Model.GetPeopleResponse.t()} | {:error, Tesla.Env.t()}
  def people_people_get_batch_get(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :personFields => :query,
      :"requestMask.includeField" => :query,
      :resourceNames => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/people:batchGet")
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.People.V1.Model.GetPeopleResponse{}])
  end

  @doc """
  Update contact data for an existing contact person. Any non-contact data will not be modified.  The request throws a 400 error if &#x60;updatePersonFields&#x60; is not specified. &lt;br&gt; The request throws a 400 error if &#x60;person.metadata.sources&#x60; is not specified for the contact to be updated. &lt;br&gt; The request throws a 412 error if &#x60;person.metadata.sources.etag&#x60; is different than the contact&#39;s etag, which indicates the contact has changed since its data was read. Clients should get the latest person and re-apply their updates to the latest person.

  ## Parameters

  - connection (GoogleApi.People.V1.Connection): Connection to server
  - people_id (String.t): Part of &#x60;person.resourceName&#x60;. The resource name for the person, assigned by the server. An ASCII string with a max length of 27 characters, in the form of &#x60;people/&#x60;&lt;var&gt;person_id&lt;/var&gt;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :$.xgafv (String.t): V1 error format.
    - :access_token (String.t): OAuth access token.
    - :alt (String.t): Data format for response.
    - :callback (String.t): JSONP
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :updatePersonFields (String.t): **Required.** A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All updated fields will be replaced. Valid values are:  * addresses * biographies * birthdays * emailAddresses * events * genders * imClients * interests * locales * names * nicknames * occupations * organizations * phoneNumbers * relations * residences * sipAddresses * urls * userDefined
    - :body (Person): 

  ## Returns

  {:ok, %GoogleApi.People.V1.Model.Person{}} on success
  {:error, info} on failure
  """
  @spec people_people_update_contact(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.People.V1.Model.Person.t()} | {:error, Tesla.Env.t()}
  def people_people_update_contact(connection, people_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :upload_protocol => :query,
      :uploadType => :query,
      :updatePersonFields => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1/people/{peopleId}:updateContact", %{
        "peopleId" => URI.encode_www_form(people_id)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.People.V1.Model.Person{}])
  end
end
