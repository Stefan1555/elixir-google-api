# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Vision.V1.Model.ImportProductSetsGcsSource do
  @moduledoc """
  The Google Cloud Storage location for a csv file which preserves a list of ImportProductSetRequests in each line.

  ## Attributes

  - csvFileUri (String.t): The Google Cloud Storage URI of the input csv file.  The URI must start with &#x60;gs://&#x60;.  The format of the input csv file should be one image per line. In each line, there are 8 columns.  1.  image-uri 2.  image-id 3.  product-set-id 4.  product-id 5.  product-category 6.  product-display-name 7.  labels 8.  bounding-poly  The &#x60;image-uri&#x60;, &#x60;product-set-id&#x60;, &#x60;product-id&#x60;, and &#x60;product-category&#x60; columns are required. All other columns are optional.  If the &#x60;ProductSet&#x60; or &#x60;Product&#x60; specified by the &#x60;product-set-id&#x60; and &#x60;product-id&#x60; values does not exist, then the system will create a new &#x60;ProductSet&#x60; or &#x60;Product&#x60; for the image. In this case, the &#x60;product-display-name&#x60; column refers to display_name, the &#x60;product-category&#x60; column refers to product_category, and the &#x60;labels&#x60; column refers to product_labels.  The &#x60;image-id&#x60; column is optional but must be unique if provided. If it is empty, the system will automatically assign a unique id to the image.  The &#x60;product-display-name&#x60; column is optional. If it is empty, the system sets the display_name field for the product to a space (\&quot; \&quot;). You can update the &#x60;display_name&#x60; later by using the API.  If a &#x60;Product&#x60; with the specified &#x60;product-id&#x60; already exists, then the system ignores the &#x60;product-display-name&#x60;, &#x60;product-category&#x60;, and &#x60;labels&#x60; columns.  The &#x60;labels&#x60; column (optional) is a line containing a list of comma-separated key-value pairs, in the following format:      \&quot;key_1&#x3D;value_1,key_2&#x3D;value_2,...,key_n&#x3D;value_n\&quot;  The &#x60;bounding-poly&#x60; column (optional) identifies one region of interest from the image in the same manner as &#x60;CreateReferenceImage&#x60;. If you do not specify the &#x60;bounding-poly&#x60; column, then the system will try to detect regions of interest automatically.  At most one &#x60;bounding-poly&#x60; column is allowed per line. If the image contains multiple regions of interest, add a line to the CSV file that includes the same product information, and the &#x60;bounding-poly&#x60; values for each region of interest.  The &#x60;bounding-poly&#x60; column must contain an even number of comma-separated numbers, in the format \&quot;p1_x,p1_y,p2_x,p2_y,...,pn_x,pn_y\&quot;. Use non-negative integers for absolute bounding polygons, and float values in [0, 1] for normalized bounding polygons.  The system will resize the image if the image resolution is too large to process (larger than 20MP). Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :csvFileUri => any()
        }

  field(:csvFileUri)
end

defimpl Poison.Decoder, for: GoogleApi.Vision.V1.Model.ImportProductSetsGcsSource do
  def decode(value, options) do
    GoogleApi.Vision.V1.Model.ImportProductSetsGcsSource.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Vision.V1.Model.ImportProductSetsGcsSource do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
