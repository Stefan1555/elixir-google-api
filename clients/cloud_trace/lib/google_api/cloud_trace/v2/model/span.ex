# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudTrace.V2.Model.Span do
  @moduledoc """
  A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguous&amp;mdash;there may be gaps or overlaps between spans in a trace.

  ## Attributes

  - attributes (Attributes): A set of attributes on the span. You can have up to 32 attributes per span. Defaults to: `null`.
  - childSpanCount (integer()): An optional number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans. Defaults to: `null`.
  - displayName (TruncatableString): A description of the span&#39;s operation (up to 128 bytes). Stackdriver Trace displays the description in the Google Cloud Platform Console. For example, the display name can be a qualified method name or a file name and a line number where the operation is called. A best practice is to use the same display name within an application and at the same call point. This makes it easier to correlate spans in different traces. Defaults to: `null`.
  - endTime (DateTime.t): The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running. Defaults to: `null`.
  - links (Links): Links associated with the span. You can have up to 128 links per Span. Defaults to: `null`.
  - name (String.t): The resource name of the span in the following format:      projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array.  [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array. Defaults to: `null`.
  - parentSpanId (String.t): The [SPAN_ID] of this span&#39;s parent span. If this is a root span, then this field must be empty. Defaults to: `null`.
  - sameProcessAsParentSpan (boolean()): (Optional) Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this helpful information. Defaults to: `null`.
  - spanId (String.t): The [SPAN_ID] portion of the span&#39;s resource name. Defaults to: `null`.
  - stackTrace (StackTrace): Stack trace captured at the start of the span. Defaults to: `null`.
  - startTime (DateTime.t): The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server&#39;s application handler starts running. Defaults to: `null`.
  - status (Status): An optional final status for this span. Defaults to: `null`.
  - timeEvents (TimeEvents): A set of time events. You can have up to 32 annotations and 128 message events per span. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :attributes => GoogleApi.CloudTrace.V2.Model.Attributes.t(),
          :childSpanCount => any(),
          :displayName => GoogleApi.CloudTrace.V2.Model.TruncatableString.t(),
          :endTime => DateTime.t(),
          :links => GoogleApi.CloudTrace.V2.Model.Links.t(),
          :name => any(),
          :parentSpanId => any(),
          :sameProcessAsParentSpan => any(),
          :spanId => any(),
          :stackTrace => GoogleApi.CloudTrace.V2.Model.StackTrace.t(),
          :startTime => DateTime.t(),
          :status => GoogleApi.CloudTrace.V2.Model.Status.t(),
          :timeEvents => GoogleApi.CloudTrace.V2.Model.TimeEvents.t()
        }

  field(:attributes, as: GoogleApi.CloudTrace.V2.Model.Attributes)
  field(:childSpanCount)
  field(:displayName, as: GoogleApi.CloudTrace.V2.Model.TruncatableString)
  field(:endTime, as: DateTime)
  field(:links, as: GoogleApi.CloudTrace.V2.Model.Links)
  field(:name)
  field(:parentSpanId)
  field(:sameProcessAsParentSpan)
  field(:spanId)
  field(:stackTrace, as: GoogleApi.CloudTrace.V2.Model.StackTrace)
  field(:startTime, as: DateTime)
  field(:status, as: GoogleApi.CloudTrace.V2.Model.Status)
  field(:timeEvents, as: GoogleApi.CloudTrace.V2.Model.TimeEvents)
end

defimpl Poison.Decoder, for: GoogleApi.CloudTrace.V2.Model.Span do
  def decode(value, options) do
    GoogleApi.CloudTrace.V2.Model.Span.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudTrace.V2.Model.Span do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
